/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * LACKORA API
 * LACKORA Advanced REST API
 * OpenAPI spec version: v1
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  LoginCommand,
  RefreshTokenCommand,
  RegisterCommand
} from './models';

import { orvalMutator } from '../orval-mutator';





/**
 * Sample request:
{
  "username": "newuser",
  "email": "user@example.com",
  "password": "StrongPass123"
}
 * @summary Registers a new user and returns tokens.
 */
export const authRegisterUser = (
    registerCommand: RegisterCommand,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<void>(
      {url: `/api/v1/Auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: registerCommand, signal
    },
      );
    }
  


export const getAuthRegisterUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authRegisterUser>>, TError,{data: RegisterCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authRegisterUser>>, TError,{data: RegisterCommand}, TContext> => {

const mutationKey = ['authRegisterUser'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authRegisterUser>>, {data: RegisterCommand}> = (props) => {
          const {data} = props ?? {};

          return  authRegisterUser(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthRegisterUserMutationResult = NonNullable<Awaited<ReturnType<typeof authRegisterUser>>>
    export type AuthRegisterUserMutationBody = RegisterCommand
    export type AuthRegisterUserMutationError = unknown

    /**
 * @summary Registers a new user and returns tokens.
 */
export const useAuthRegisterUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authRegisterUser>>, TError,{data: RegisterCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof authRegisterUser>>,
        TError,
        {data: RegisterCommand},
        TContext
      > => {

      const mutationOptions = getAuthRegisterUserMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Sample request:
{
  "username": "user",
  "password": "pass"
}
 * @summary Logs in a user and returns tokens.
 */
export const authLoginUser = (
    loginCommand: LoginCommand,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<void>(
      {url: `/api/v1/Auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginCommand, signal
    },
      );
    }
  


export const getAuthLoginUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authLoginUser>>, TError,{data: LoginCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authLoginUser>>, TError,{data: LoginCommand}, TContext> => {

const mutationKey = ['authLoginUser'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authLoginUser>>, {data: LoginCommand}> = (props) => {
          const {data} = props ?? {};

          return  authLoginUser(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthLoginUserMutationResult = NonNullable<Awaited<ReturnType<typeof authLoginUser>>>
    export type AuthLoginUserMutationBody = LoginCommand
    export type AuthLoginUserMutationError = unknown

    /**
 * @summary Logs in a user and returns tokens.
 */
export const useAuthLoginUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authLoginUser>>, TError,{data: LoginCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof authLoginUser>>,
        TError,
        {data: LoginCommand},
        TContext
      > => {

      const mutationOptions = getAuthLoginUserMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Refreshes the access token.
 */
export const authRefreshToken = (
    refreshTokenCommand: RefreshTokenCommand,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<void>(
      {url: `/api/v1/Auth/refresh`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: refreshTokenCommand, signal
    },
      );
    }
  


export const getAuthRefreshTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authRefreshToken>>, TError,{data: RefreshTokenCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authRefreshToken>>, TError,{data: RefreshTokenCommand}, TContext> => {

const mutationKey = ['authRefreshToken'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authRefreshToken>>, {data: RefreshTokenCommand}> = (props) => {
          const {data} = props ?? {};

          return  authRefreshToken(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthRefreshTokenMutationResult = NonNullable<Awaited<ReturnType<typeof authRefreshToken>>>
    export type AuthRefreshTokenMutationBody = RefreshTokenCommand
    export type AuthRefreshTokenMutationError = unknown

    /**
 * @summary Refreshes the access token.
 */
export const useAuthRefreshToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authRefreshToken>>, TError,{data: RefreshTokenCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof authRefreshToken>>,
        TError,
        {data: RefreshTokenCommand},
        TContext
      > => {

      const mutationOptions = getAuthRefreshTokenMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Logs out the user by blacklisting the token.
 */
export const authLogoutUser = (
    
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<void>(
      {url: `/api/v1/Auth/logout`, method: 'POST', signal
    },
      );
    }
  


export const getAuthLogoutUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authLogoutUser>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authLogoutUser>>, TError,void, TContext> => {

const mutationKey = ['authLogoutUser'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authLogoutUser>>, void> = () => {
          

          return  authLogoutUser()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthLogoutUserMutationResult = NonNullable<Awaited<ReturnType<typeof authLogoutUser>>>
    
    export type AuthLogoutUserMutationError = unknown

    /**
 * @summary Logs out the user by blacklisting the token.
 */
export const useAuthLogoutUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authLogoutUser>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof authLogoutUser>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getAuthLogoutUserMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    