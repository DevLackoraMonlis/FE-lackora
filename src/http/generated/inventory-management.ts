/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * MonoWatch BackBone
 * MonoWatch Security Asset Management
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AdvanceFilterRequestModel,
  EachInventoryCategoryResponse,
  EachInventoryOverview,
  EachInventorySubCategory,
  GetInventoryOverviewParams,
  HTTPValidationError,
  InventoryDataAdvanceFilterRequestModel,
  InventoryDataAdvancedFilterResponse,
  InventoryManagementFilterColumnsResponse
} from './models';

import { orvalMutator } from '../orval-mutator';





/**
 * @summary Test Inventory Bulk Insert
 */
export const testInventoryBulkInsertApiInventoryManagementBulkInsertTestGet = (
    
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<unknown>(
      {url: "/api/inventory-management/bulk-insert-test", method: 'GET', signal
    },
      );
    }
  

const getTestInventoryBulkInsertApiInventoryManagementBulkInsertTestGetQueryKey = () => {
    return ["/api/inventory-management/bulk-insert-test"] as const;
    }

    
export const getTestInventoryBulkInsertApiInventoryManagementBulkInsertTestGetQueryOptions = <TData = Awaited<ReturnType<typeof testInventoryBulkInsertApiInventoryManagementBulkInsertTestGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof testInventoryBulkInsertApiInventoryManagementBulkInsertTestGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTestInventoryBulkInsertApiInventoryManagementBulkInsertTestGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof testInventoryBulkInsertApiInventoryManagementBulkInsertTestGet>>> = ({ signal }) => testInventoryBulkInsertApiInventoryManagementBulkInsertTestGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof testInventoryBulkInsertApiInventoryManagementBulkInsertTestGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TestInventoryBulkInsertApiInventoryManagementBulkInsertTestGetQueryResult = NonNullable<Awaited<ReturnType<typeof testInventoryBulkInsertApiInventoryManagementBulkInsertTestGet>>>
export type TestInventoryBulkInsertApiInventoryManagementBulkInsertTestGetQueryError = unknown


export function useTestInventoryBulkInsertApiInventoryManagementBulkInsertTestGet<TData = Awaited<ReturnType<typeof testInventoryBulkInsertApiInventoryManagementBulkInsertTestGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof testInventoryBulkInsertApiInventoryManagementBulkInsertTestGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof testInventoryBulkInsertApiInventoryManagementBulkInsertTestGet>>,
          TError,
          Awaited<ReturnType<typeof testInventoryBulkInsertApiInventoryManagementBulkInsertTestGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTestInventoryBulkInsertApiInventoryManagementBulkInsertTestGet<TData = Awaited<ReturnType<typeof testInventoryBulkInsertApiInventoryManagementBulkInsertTestGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof testInventoryBulkInsertApiInventoryManagementBulkInsertTestGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof testInventoryBulkInsertApiInventoryManagementBulkInsertTestGet>>,
          TError,
          Awaited<ReturnType<typeof testInventoryBulkInsertApiInventoryManagementBulkInsertTestGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTestInventoryBulkInsertApiInventoryManagementBulkInsertTestGet<TData = Awaited<ReturnType<typeof testInventoryBulkInsertApiInventoryManagementBulkInsertTestGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof testInventoryBulkInsertApiInventoryManagementBulkInsertTestGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Test Inventory Bulk Insert
 */

export function useTestInventoryBulkInsertApiInventoryManagementBulkInsertTestGet<TData = Awaited<ReturnType<typeof testInventoryBulkInsertApiInventoryManagementBulkInsertTestGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof testInventoryBulkInsertApiInventoryManagementBulkInsertTestGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTestInventoryBulkInsertApiInventoryManagementBulkInsertTestGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Inventory Data Overview
 */
export const getInventoryOverview = (
    params: GetInventoryOverviewParams,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<EachInventoryOverview[]>(
      {url: "/api/inventory-management/overview", method: 'GET',
        params, signal
    },
      );
    }
  

const getGetInventoryOverviewQueryKey = (params: GetInventoryOverviewParams,) => {
    return ["/api/inventory-management/overview", ...(params ? [params]: [])] as const;
    }

    
export const getGetInventoryOverviewQueryOptions = <TData = Awaited<ReturnType<typeof getInventoryOverview>>, TError = HTTPValidationError>(params: GetInventoryOverviewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryOverview>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetInventoryOverviewQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInventoryOverview>>> = ({ signal }) => getInventoryOverview(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getInventoryOverview>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetInventoryOverviewQueryResult = NonNullable<Awaited<ReturnType<typeof getInventoryOverview>>>
export type GetInventoryOverviewQueryError = HTTPValidationError


export function useGetInventoryOverview<TData = Awaited<ReturnType<typeof getInventoryOverview>>, TError = HTTPValidationError>(
 params: GetInventoryOverviewParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryOverview>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInventoryOverview>>,
          TError,
          Awaited<ReturnType<typeof getInventoryOverview>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInventoryOverview<TData = Awaited<ReturnType<typeof getInventoryOverview>>, TError = HTTPValidationError>(
 params: GetInventoryOverviewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryOverview>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInventoryOverview>>,
          TError,
          Awaited<ReturnType<typeof getInventoryOverview>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInventoryOverview<TData = Awaited<ReturnType<typeof getInventoryOverview>>, TError = HTTPValidationError>(
 params: GetInventoryOverviewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryOverview>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Inventory Data Overview
 */

export function useGetInventoryOverview<TData = Awaited<ReturnType<typeof getInventoryOverview>>, TError = HTTPValidationError>(
 params: GetInventoryOverviewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryOverview>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetInventoryOverviewQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Inventory Types
 */
export const getInventoryTypes = (
    
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<EachInventoryCategoryResponse[]>(
      {url: "/api/inventory-management/available-types", method: 'GET', signal
    },
      );
    }
  

const getGetInventoryTypesQueryKey = () => {
    return ["/api/inventory-management/available-types"] as const;
    }

    
export const getGetInventoryTypesQueryOptions = <TData = Awaited<ReturnType<typeof getInventoryTypes>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryTypes>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetInventoryTypesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInventoryTypes>>> = ({ signal }) => getInventoryTypes(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getInventoryTypes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetInventoryTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getInventoryTypes>>>
export type GetInventoryTypesQueryError = unknown


export function useGetInventoryTypes<TData = Awaited<ReturnType<typeof getInventoryTypes>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryTypes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInventoryTypes>>,
          TError,
          Awaited<ReturnType<typeof getInventoryTypes>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInventoryTypes<TData = Awaited<ReturnType<typeof getInventoryTypes>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryTypes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInventoryTypes>>,
          TError,
          Awaited<ReturnType<typeof getInventoryTypes>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInventoryTypes<TData = Awaited<ReturnType<typeof getInventoryTypes>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryTypes>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Inventory Types
 */

export function useGetInventoryTypes<TData = Awaited<ReturnType<typeof getInventoryTypes>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryTypes>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetInventoryTypesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Inventory Filter Columns
 */
export const getInventoryFilterColumns = (
    type: EachInventorySubCategory,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<InventoryManagementFilterColumnsResponse>(
      {url: `/api/inventory-management/${type}/columns`, method: 'GET', signal
    },
      );
    }
  

const getGetInventoryFilterColumnsQueryKey = (type: EachInventorySubCategory,) => {
    return [`/api/inventory-management/${type}/columns`] as const;
    }

    
export const getGetInventoryFilterColumnsQueryOptions = <TData = Awaited<ReturnType<typeof getInventoryFilterColumns>>, TError = HTTPValidationError>(type: EachInventorySubCategory, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryFilterColumns>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetInventoryFilterColumnsQueryKey(type);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInventoryFilterColumns>>> = ({ signal }) => getInventoryFilterColumns(type, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(type), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getInventoryFilterColumns>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetInventoryFilterColumnsQueryResult = NonNullable<Awaited<ReturnType<typeof getInventoryFilterColumns>>>
export type GetInventoryFilterColumnsQueryError = HTTPValidationError


export function useGetInventoryFilterColumns<TData = Awaited<ReturnType<typeof getInventoryFilterColumns>>, TError = HTTPValidationError>(
 type: EachInventorySubCategory, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryFilterColumns>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInventoryFilterColumns>>,
          TError,
          Awaited<ReturnType<typeof getInventoryFilterColumns>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInventoryFilterColumns<TData = Awaited<ReturnType<typeof getInventoryFilterColumns>>, TError = HTTPValidationError>(
 type: EachInventorySubCategory, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryFilterColumns>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInventoryFilterColumns>>,
          TError,
          Awaited<ReturnType<typeof getInventoryFilterColumns>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInventoryFilterColumns<TData = Awaited<ReturnType<typeof getInventoryFilterColumns>>, TError = HTTPValidationError>(
 type: EachInventorySubCategory, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryFilterColumns>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Inventory Filter Columns
 */

export function useGetInventoryFilterColumns<TData = Awaited<ReturnType<typeof getInventoryFilterColumns>>, TError = HTTPValidationError>(
 type: EachInventorySubCategory, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryFilterColumns>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetInventoryFilterColumnsQueryOptions(type,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Inventory Type Related Data
 */
export const getInventoryData = (
    type: EachInventorySubCategory,
    advanceFilterRequestModel: AdvanceFilterRequestModel,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<InventoryDataAdvancedFilterResponse>(
      {url: `/api/inventory-management/${type}/inventory-data`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: advanceFilterRequestModel, signal
    },
      );
    }
  


export const getGetInventoryDataMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getInventoryData>>, TError,{type: EachInventorySubCategory;data: AdvanceFilterRequestModel}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof getInventoryData>>, TError,{type: EachInventorySubCategory;data: AdvanceFilterRequestModel}, TContext> => {

const mutationKey = ['getInventoryData'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getInventoryData>>, {type: EachInventorySubCategory;data: AdvanceFilterRequestModel}> = (props) => {
          const {type,data} = props ?? {};

          return  getInventoryData(type,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GetInventoryDataMutationResult = NonNullable<Awaited<ReturnType<typeof getInventoryData>>>
    export type GetInventoryDataMutationBody = AdvanceFilterRequestModel
    export type GetInventoryDataMutationError = HTTPValidationError

    /**
 * @summary Get Inventory Type Related Data
 */
export const useGetInventoryData = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getInventoryData>>, TError,{type: EachInventorySubCategory;data: AdvanceFilterRequestModel}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof getInventoryData>>,
        TError,
        {type: EachInventorySubCategory;data: AdvanceFilterRequestModel},
        TContext
      > => {

      const mutationOptions = getGetInventoryDataMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get Asset Inventory Type Related Data
 */
export const getAssetInventoryData = (
    type: EachInventorySubCategory,
    inventoryDataAdvanceFilterRequestModel: InventoryDataAdvanceFilterRequestModel,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<InventoryDataAdvancedFilterResponse>(
      {url: `/api/inventory-management/${type}/asset-inventory`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: inventoryDataAdvanceFilterRequestModel, signal
    },
      );
    }
  


export const getGetAssetInventoryDataMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getAssetInventoryData>>, TError,{type: EachInventorySubCategory;data: InventoryDataAdvanceFilterRequestModel}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof getAssetInventoryData>>, TError,{type: EachInventorySubCategory;data: InventoryDataAdvanceFilterRequestModel}, TContext> => {

const mutationKey = ['getAssetInventoryData'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getAssetInventoryData>>, {type: EachInventorySubCategory;data: InventoryDataAdvanceFilterRequestModel}> = (props) => {
          const {type,data} = props ?? {};

          return  getAssetInventoryData(type,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GetAssetInventoryDataMutationResult = NonNullable<Awaited<ReturnType<typeof getAssetInventoryData>>>
    export type GetAssetInventoryDataMutationBody = InventoryDataAdvanceFilterRequestModel
    export type GetAssetInventoryDataMutationError = HTTPValidationError

    /**
 * @summary Get Asset Inventory Type Related Data
 */
export const useGetAssetInventoryData = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getAssetInventoryData>>, TError,{type: EachInventorySubCategory;data: InventoryDataAdvanceFilterRequestModel}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof getAssetInventoryData>>,
        TError,
        {type: EachInventorySubCategory;data: InventoryDataAdvanceFilterRequestModel},
        TContext
      > => {

      const mutationOptions = getGetAssetInventoryDataMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    