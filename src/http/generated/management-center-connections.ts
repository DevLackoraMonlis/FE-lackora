/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * MonoWatch BackBone
 * MonoWatch Security Asset Management
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateConnection,
  EachConnection,
  EditConnection,
  GetConnectionsParams,
  HTTPValidationError,
  MessageOnlyResponse,
  PaginatedBaseResponseEachPrivateConnectionEachListMetadataWrapper
} from './models';

import { orvalMutator } from '../orval-mutator';





/**
 * @summary List All Connections
 */
export const getConnections = (
    params?: GetConnectionsParams,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<PaginatedBaseResponseEachPrivateConnectionEachListMetadataWrapper>(
      {url: `/api/management-center/connections/`, method: 'GET',
        params, signal
    },
      );
    }
  

const getGetConnectionsQueryKey = (params?: GetConnectionsParams,) => {
    return [`/api/management-center/connections/`, ...(params ? [params]: [])] as const;
    }

    
export const getGetConnectionsQueryOptions = <TData = Awaited<ReturnType<typeof getConnections>>, TError = HTTPValidationError>(params?: GetConnectionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConnections>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConnectionsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConnections>>> = ({ signal }) => getConnections(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getConnections>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetConnectionsQueryResult = NonNullable<Awaited<ReturnType<typeof getConnections>>>
export type GetConnectionsQueryError = HTTPValidationError


export function useGetConnections<TData = Awaited<ReturnType<typeof getConnections>>, TError = HTTPValidationError>(
 params: undefined |  GetConnectionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConnections>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConnections>>,
          TError,
          Awaited<ReturnType<typeof getConnections>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetConnections<TData = Awaited<ReturnType<typeof getConnections>>, TError = HTTPValidationError>(
 params?: GetConnectionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConnections>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConnections>>,
          TError,
          Awaited<ReturnType<typeof getConnections>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetConnections<TData = Awaited<ReturnType<typeof getConnections>>, TError = HTTPValidationError>(
 params?: GetConnectionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConnections>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List All Connections
 */

export function useGetConnections<TData = Awaited<ReturnType<typeof getConnections>>, TError = HTTPValidationError>(
 params?: GetConnectionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConnections>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetConnectionsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create Connection
 */
export const createConnection = (
    createConnection: CreateConnection,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<EachConnection>(
      {url: `/api/management-center/connections/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createConnection, signal
    },
      );
    }
  


export const getCreateConnectionMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createConnection>>, TError,{data: CreateConnection}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createConnection>>, TError,{data: CreateConnection}, TContext> => {

const mutationKey = ['createConnection'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createConnection>>, {data: CreateConnection}> = (props) => {
          const {data} = props ?? {};

          return  createConnection(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateConnectionMutationResult = NonNullable<Awaited<ReturnType<typeof createConnection>>>
    export type CreateConnectionMutationBody = CreateConnection
    export type CreateConnectionMutationError = HTTPValidationError

    /**
 * @summary Create Connection
 */
export const useCreateConnection = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createConnection>>, TError,{data: CreateConnection}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createConnection>>,
        TError,
        {data: CreateConnection},
        TContext
      > => {

      const mutationOptions = getCreateConnectionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary List Single Connections
 */
export const getConnection = (
    connectionId: string,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<EachConnection>(
      {url: `/api/management-center/connections/${connectionId}`, method: 'GET', signal
    },
      );
    }
  

const getGetConnectionQueryKey = (connectionId: string,) => {
    return [`/api/management-center/connections/${connectionId}`] as const;
    }

    
export const getGetConnectionQueryOptions = <TData = Awaited<ReturnType<typeof getConnection>>, TError = HTTPValidationError>(connectionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConnection>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConnectionQueryKey(connectionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConnection>>> = ({ signal }) => getConnection(connectionId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(connectionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getConnection>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetConnectionQueryResult = NonNullable<Awaited<ReturnType<typeof getConnection>>>
export type GetConnectionQueryError = HTTPValidationError


export function useGetConnection<TData = Awaited<ReturnType<typeof getConnection>>, TError = HTTPValidationError>(
 connectionId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConnection>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConnection>>,
          TError,
          Awaited<ReturnType<typeof getConnection>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetConnection<TData = Awaited<ReturnType<typeof getConnection>>, TError = HTTPValidationError>(
 connectionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConnection>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConnection>>,
          TError,
          Awaited<ReturnType<typeof getConnection>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetConnection<TData = Awaited<ReturnType<typeof getConnection>>, TError = HTTPValidationError>(
 connectionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConnection>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List Single Connections
 */

export function useGetConnection<TData = Awaited<ReturnType<typeof getConnection>>, TError = HTTPValidationError>(
 connectionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConnection>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetConnectionQueryOptions(connectionId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Connection
 */
export const editConnection = (
    connectionId: string,
    editConnection: EditConnection,
 ) => {
      
      
      return orvalMutator<EachConnection>(
      {url: `/api/management-center/connections/${connectionId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: editConnection
    },
      );
    }
  


export const getEditConnectionMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof editConnection>>, TError,{connectionId: string;data: EditConnection}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof editConnection>>, TError,{connectionId: string;data: EditConnection}, TContext> => {

const mutationKey = ['editConnection'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof editConnection>>, {connectionId: string;data: EditConnection}> = (props) => {
          const {connectionId,data} = props ?? {};

          return  editConnection(connectionId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EditConnectionMutationResult = NonNullable<Awaited<ReturnType<typeof editConnection>>>
    export type EditConnectionMutationBody = EditConnection
    export type EditConnectionMutationError = HTTPValidationError

    /**
 * @summary Update Connection
 */
export const useEditConnection = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof editConnection>>, TError,{connectionId: string;data: EditConnection}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof editConnection>>,
        TError,
        {connectionId: string;data: EditConnection},
        TContext
      > => {

      const mutationOptions = getEditConnectionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete Connection By Id
 */
export const deleteConnection = (
    connectionId: string,
 ) => {
      
      
      return orvalMutator<MessageOnlyResponse>(
      {url: `/api/management-center/connections/${connectionId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteConnectionMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteConnection>>, TError,{connectionId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteConnection>>, TError,{connectionId: string}, TContext> => {

const mutationKey = ['deleteConnection'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteConnection>>, {connectionId: string}> = (props) => {
          const {connectionId} = props ?? {};

          return  deleteConnection(connectionId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteConnectionMutationResult = NonNullable<Awaited<ReturnType<typeof deleteConnection>>>
    
    export type DeleteConnectionMutationError = HTTPValidationError

    /**
 * @summary Delete Connection By Id
 */
export const useDeleteConnection = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteConnection>>, TError,{connectionId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteConnection>>,
        TError,
        {connectionId: string},
        TContext
      > => {

      const mutationOptions = getDeleteConnectionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get Single Connection Used In
 */
export const getConnectionUsedInObjects = (
    connectionId: string,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<MessageOnlyResponse>(
      {url: `/api/management-center/connections/${connectionId}/used-in`, method: 'GET', signal
    },
      );
    }
  

const getGetConnectionUsedInObjectsQueryKey = (connectionId: string,) => {
    return [`/api/management-center/connections/${connectionId}/used-in`] as const;
    }

    
export const getGetConnectionUsedInObjectsQueryOptions = <TData = Awaited<ReturnType<typeof getConnectionUsedInObjects>>, TError = HTTPValidationError>(connectionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConnectionUsedInObjects>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConnectionUsedInObjectsQueryKey(connectionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConnectionUsedInObjects>>> = ({ signal }) => getConnectionUsedInObjects(connectionId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(connectionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getConnectionUsedInObjects>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetConnectionUsedInObjectsQueryResult = NonNullable<Awaited<ReturnType<typeof getConnectionUsedInObjects>>>
export type GetConnectionUsedInObjectsQueryError = HTTPValidationError


export function useGetConnectionUsedInObjects<TData = Awaited<ReturnType<typeof getConnectionUsedInObjects>>, TError = HTTPValidationError>(
 connectionId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConnectionUsedInObjects>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConnectionUsedInObjects>>,
          TError,
          Awaited<ReturnType<typeof getConnectionUsedInObjects>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetConnectionUsedInObjects<TData = Awaited<ReturnType<typeof getConnectionUsedInObjects>>, TError = HTTPValidationError>(
 connectionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConnectionUsedInObjects>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConnectionUsedInObjects>>,
          TError,
          Awaited<ReturnType<typeof getConnectionUsedInObjects>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetConnectionUsedInObjects<TData = Awaited<ReturnType<typeof getConnectionUsedInObjects>>, TError = HTTPValidationError>(
 connectionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConnectionUsedInObjects>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Single Connection Used In
 */

export function useGetConnectionUsedInObjects<TData = Awaited<ReturnType<typeof getConnectionUsedInObjects>>, TError = HTTPValidationError>(
 connectionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConnectionUsedInObjects>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetConnectionUsedInObjectsQueryOptions(connectionId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



