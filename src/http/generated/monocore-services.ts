/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * MonoWatch BackBone
 * MonoWatch Security Asset Management - BackBone Structure
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";

import type {
	GetNonceApiCoreGetNonceGetParams,
	HTTPValidationError,
	SampleNonceProtectedEndpointApiCoreNonceProtectedSampleGetParams,
} from "./models";

import { orvalMutator } from "../orval-mutator";

/**
 * @summary Get Nonce
 */
export const getNonceApiCoreGetNonceGet = (
	params: GetNonceApiCoreGetNonceGetParams,
	signal?: AbortSignal,
) => {
	return orvalMutator<unknown>({
		url: "/api/core/get-nonce",
		method: "GET",
		params,
		signal,
	});
};

const getGetNonceApiCoreGetNonceGetQueryKey = (
	params: GetNonceApiCoreGetNonceGetParams,
) => {
	return ["/api/core/get-nonce", ...(params ? [params] : [])] as const;
};

export const getGetNonceApiCoreGetNonceGetQueryOptions = <
	TData = Awaited<ReturnType<typeof getNonceApiCoreGetNonceGet>>,
	TError = HTTPValidationError,
>(
	params: GetNonceApiCoreGetNonceGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getNonceApiCoreGetNonceGet>>,
				TError,
				TData
			>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetNonceApiCoreGetNonceGetQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getNonceApiCoreGetNonceGet>>
	> = ({ signal }) => getNonceApiCoreGetNonceGet(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getNonceApiCoreGetNonceGet>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetNonceApiCoreGetNonceGetQueryResult = NonNullable<
	Awaited<ReturnType<typeof getNonceApiCoreGetNonceGet>>
>;
export type GetNonceApiCoreGetNonceGetQueryError = HTTPValidationError;

export function useGetNonceApiCoreGetNonceGet<
	TData = Awaited<ReturnType<typeof getNonceApiCoreGetNonceGet>>,
	TError = HTTPValidationError,
>(
	params: GetNonceApiCoreGetNonceGetParams,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getNonceApiCoreGetNonceGet>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getNonceApiCoreGetNonceGet>>,
					TError,
					Awaited<ReturnType<typeof getNonceApiCoreGetNonceGet>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNonceApiCoreGetNonceGet<
	TData = Awaited<ReturnType<typeof getNonceApiCoreGetNonceGet>>,
	TError = HTTPValidationError,
>(
	params: GetNonceApiCoreGetNonceGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getNonceApiCoreGetNonceGet>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getNonceApiCoreGetNonceGet>>,
					TError,
					Awaited<ReturnType<typeof getNonceApiCoreGetNonceGet>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNonceApiCoreGetNonceGet<
	TData = Awaited<ReturnType<typeof getNonceApiCoreGetNonceGet>>,
	TError = HTTPValidationError,
>(
	params: GetNonceApiCoreGetNonceGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getNonceApiCoreGetNonceGet>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Nonce
 */

export function useGetNonceApiCoreGetNonceGet<
	TData = Awaited<ReturnType<typeof getNonceApiCoreGetNonceGet>>,
	TError = HTTPValidationError,
>(
	params: GetNonceApiCoreGetNonceGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getNonceApiCoreGetNonceGet>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetNonceApiCoreGetNonceGetQueryOptions(
		params,
		options,
	);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Sample Nonce Protected Endpoint
 */
export const sampleNonceProtectedEndpointApiCoreNonceProtectedSampleGet = (
	params?: SampleNonceProtectedEndpointApiCoreNonceProtectedSampleGetParams,
	signal?: AbortSignal,
) => {
	return orvalMutator<unknown>({
		url: "/api/core/nonce-protected-sample",
		method: "GET",
		params,
		signal,
	});
};

const getSampleNonceProtectedEndpointApiCoreNonceProtectedSampleGetQueryKey = (
	params?: SampleNonceProtectedEndpointApiCoreNonceProtectedSampleGetParams,
) => {
	return [
		"/api/core/nonce-protected-sample",
		...(params ? [params] : []),
	] as const;
};

export const getSampleNonceProtectedEndpointApiCoreNonceProtectedSampleGetQueryOptions =
	<
		TData = Awaited<
			ReturnType<
				typeof sampleNonceProtectedEndpointApiCoreNonceProtectedSampleGet
			>
		>,
		TError = HTTPValidationError,
	>(
		params?: SampleNonceProtectedEndpointApiCoreNonceProtectedSampleGetParams,
		options?: {
			query?: Partial<
				UseQueryOptions<
					Awaited<
						ReturnType<
							typeof sampleNonceProtectedEndpointApiCoreNonceProtectedSampleGet
						>
					>,
					TError,
					TData
				>
			>;
		},
	) => {
		const { query: queryOptions } = options ?? {};

		const queryKey =
			queryOptions?.queryKey ??
			getSampleNonceProtectedEndpointApiCoreNonceProtectedSampleGetQueryKey(
				params,
			);

		const queryFn: QueryFunction<
			Awaited<
				ReturnType<
					typeof sampleNonceProtectedEndpointApiCoreNonceProtectedSampleGet
				>
			>
		> = ({ signal }) =>
			sampleNonceProtectedEndpointApiCoreNonceProtectedSampleGet(
				params,
				signal,
			);

		return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
			Awaited<
				ReturnType<
					typeof sampleNonceProtectedEndpointApiCoreNonceProtectedSampleGet
				>
			>,
			TError,
			TData
		> & { queryKey: DataTag<QueryKey, TData, TError> };
	};

export type SampleNonceProtectedEndpointApiCoreNonceProtectedSampleGetQueryResult =
	NonNullable<
		Awaited<
			ReturnType<
				typeof sampleNonceProtectedEndpointApiCoreNonceProtectedSampleGet
			>
		>
	>;
export type SampleNonceProtectedEndpointApiCoreNonceProtectedSampleGetQueryError =
	HTTPValidationError;

export function useSampleNonceProtectedEndpointApiCoreNonceProtectedSampleGet<
	TData = Awaited<
		ReturnType<
			typeof sampleNonceProtectedEndpointApiCoreNonceProtectedSampleGet
		>
	>,
	TError = HTTPValidationError,
>(
	params:
		| undefined
		| SampleNonceProtectedEndpointApiCoreNonceProtectedSampleGetParams,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<
					ReturnType<
						typeof sampleNonceProtectedEndpointApiCoreNonceProtectedSampleGet
					>
				>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<
						ReturnType<
							typeof sampleNonceProtectedEndpointApiCoreNonceProtectedSampleGet
						>
					>,
					TError,
					Awaited<
						ReturnType<
							typeof sampleNonceProtectedEndpointApiCoreNonceProtectedSampleGet
						>
					>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSampleNonceProtectedEndpointApiCoreNonceProtectedSampleGet<
	TData = Awaited<
		ReturnType<
			typeof sampleNonceProtectedEndpointApiCoreNonceProtectedSampleGet
		>
	>,
	TError = HTTPValidationError,
>(
	params?: SampleNonceProtectedEndpointApiCoreNonceProtectedSampleGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<
					ReturnType<
						typeof sampleNonceProtectedEndpointApiCoreNonceProtectedSampleGet
					>
				>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<
						ReturnType<
							typeof sampleNonceProtectedEndpointApiCoreNonceProtectedSampleGet
						>
					>,
					TError,
					Awaited<
						ReturnType<
							typeof sampleNonceProtectedEndpointApiCoreNonceProtectedSampleGet
						>
					>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSampleNonceProtectedEndpointApiCoreNonceProtectedSampleGet<
	TData = Awaited<
		ReturnType<
			typeof sampleNonceProtectedEndpointApiCoreNonceProtectedSampleGet
		>
	>,
	TError = HTTPValidationError,
>(
	params?: SampleNonceProtectedEndpointApiCoreNonceProtectedSampleGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<
					ReturnType<
						typeof sampleNonceProtectedEndpointApiCoreNonceProtectedSampleGet
					>
				>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Sample Nonce Protected Endpoint
 */

export function useSampleNonceProtectedEndpointApiCoreNonceProtectedSampleGet<
	TData = Awaited<
		ReturnType<
			typeof sampleNonceProtectedEndpointApiCoreNonceProtectedSampleGet
		>
	>,
	TError = HTTPValidationError,
>(
	params?: SampleNonceProtectedEndpointApiCoreNonceProtectedSampleGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<
					ReturnType<
						typeof sampleNonceProtectedEndpointApiCoreNonceProtectedSampleGet
					>
				>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions =
		getSampleNonceProtectedEndpointApiCoreNonceProtectedSampleGetQueryOptions(
			params,
			options,
		);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
