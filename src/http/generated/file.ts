/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * LACKORA API
 * LACKORA Advanced REST API
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AddFileCommand,
  DeactivateFileCommand,
  FileSectionParams,
  UpdateFileCommand
} from './models';

import { orvalMutator } from '../orval-mutator';





/**
 * @summary Adds a new file and links it to a section.
Returns the new FileId.
 */
export const fileAdd = (
    addFileCommand: AddFileCommand,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<void>(
      {url: `/api/v1/File/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: addFileCommand, signal
    },
      );
    }
  


export const getFileAddMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof fileAdd>>, TError,{data: AddFileCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof fileAdd>>, TError,{data: AddFileCommand}, TContext> => {

const mutationKey = ['fileAdd'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof fileAdd>>, {data: AddFileCommand}> = (props) => {
          const {data} = props ?? {};

          return  fileAdd(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type FileAddMutationResult = NonNullable<Awaited<ReturnType<typeof fileAdd>>>
    export type FileAddMutationBody = AddFileCommand
    export type FileAddMutationError = unknown

    /**
 * @summary Adds a new file and links it to a section.
Returns the new FileId.
 */
export const useFileAdd = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof fileAdd>>, TError,{data: AddFileCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof fileAdd>>,
        TError,
        {data: AddFileCommand},
        TContext
      > => {

      const mutationOptions = getFileAddMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Deactivates a file and its sections (soft delete).
Returns true if successful.
 */
export const fileDeactivate = (
    deactivateFileCommand: DeactivateFileCommand,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<void>(
      {url: `/api/v1/File/deactivate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: deactivateFileCommand, signal
    },
      );
    }
  


export const getFileDeactivateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof fileDeactivate>>, TError,{data: DeactivateFileCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof fileDeactivate>>, TError,{data: DeactivateFileCommand}, TContext> => {

const mutationKey = ['fileDeactivate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof fileDeactivate>>, {data: DeactivateFileCommand}> = (props) => {
          const {data} = props ?? {};

          return  fileDeactivate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type FileDeactivateMutationResult = NonNullable<Awaited<ReturnType<typeof fileDeactivate>>>
    export type FileDeactivateMutationBody = DeactivateFileCommand
    export type FileDeactivateMutationError = unknown

    /**
 * @summary Deactivates a file and its sections (soft delete).
Returns true if successful.
 */
export const useFileDeactivate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof fileDeactivate>>, TError,{data: DeactivateFileCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof fileDeactivate>>,
        TError,
        {data: DeactivateFileCommand},
        TContext
      > => {

      const mutationOptions = getFileDeactivateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Updates a file by deactivating the old one and creating a new one.
Returns the new FileId.
 */
export const fileUpdate = (
    updateFileCommand: UpdateFileCommand,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<void>(
      {url: `/api/v1/File/update`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: updateFileCommand, signal
    },
      );
    }
  


export const getFileUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof fileUpdate>>, TError,{data: UpdateFileCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof fileUpdate>>, TError,{data: UpdateFileCommand}, TContext> => {

const mutationKey = ['fileUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof fileUpdate>>, {data: UpdateFileCommand}> = (props) => {
          const {data} = props ?? {};

          return  fileUpdate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type FileUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof fileUpdate>>>
    export type FileUpdateMutationBody = UpdateFileCommand
    export type FileUpdateMutationError = unknown

    /**
 * @summary Updates a file by deactivating the old one and creating a new one.
Returns the new FileId.
 */
export const useFileUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof fileUpdate>>, TError,{data: UpdateFileCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof fileUpdate>>,
        TError,
        {data: UpdateFileCommand},
        TContext
      > => {

      const mutationOptions = getFileUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Retrieves files linked to a section and entity, optionally filtering by slot and including inactive files.
 */
export const fileSection = (
    params: FileSectionParams,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<void>(
      {url: `/api/v1/File/section`, method: 'GET',
        params, signal
    },
      );
    }
  

const getFileSectionQueryKey = (params: FileSectionParams,) => {
    return [`/api/v1/File/section`, ...(params ? [params]: [])] as const;
    }

    
export const getFileSectionQueryOptions = <TData = Awaited<ReturnType<typeof fileSection>>, TError = unknown>(params: FileSectionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fileSection>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFileSectionQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof fileSection>>> = ({ signal }) => fileSection(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof fileSection>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FileSectionQueryResult = NonNullable<Awaited<ReturnType<typeof fileSection>>>
export type FileSectionQueryError = unknown


export function useFileSection<TData = Awaited<ReturnType<typeof fileSection>>, TError = unknown>(
 params: FileSectionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof fileSection>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof fileSection>>,
          TError,
          Awaited<ReturnType<typeof fileSection>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFileSection<TData = Awaited<ReturnType<typeof fileSection>>, TError = unknown>(
 params: FileSectionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fileSection>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof fileSection>>,
          TError,
          Awaited<ReturnType<typeof fileSection>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFileSection<TData = Awaited<ReturnType<typeof fileSection>>, TError = unknown>(
 params: FileSectionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fileSection>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retrieves files linked to a section and entity, optionally filtering by slot and including inactive files.
 */

export function useFileSection<TData = Awaited<ReturnType<typeof fileSection>>, TError = unknown>(
 params: FileSectionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fileSection>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFileSectionQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



