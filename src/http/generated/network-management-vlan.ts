/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * MonoWatch BackBone
 * MonoWatch Security Asset Management
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateVLAN,
  EachVLAN,
  EditVLAN,
  GetVLANsParams,
  HTTPValidationError,
  MessageOnlyResponse,
  PaginatedBaseResponseEachVLANEachListMetadataWrapper
} from './models';

import { orvalMutator } from '../orval-mutator';





/**
 * @summary List All Vlans
 */
export const getVLANs = (
    params?: GetVLANsParams,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<PaginatedBaseResponseEachVLANEachListMetadataWrapper>(
      {url: "/api/network-management/vlan/", method: 'GET',
        params, signal
    },
      );
    }
  

const getGetVLANsQueryKey = (params?: GetVLANsParams,) => {
    return ["/api/network-management/vlan/", ...(params ? [params]: [])] as const;
    }

    
export const getGetVLANsQueryOptions = <TData = Awaited<ReturnType<typeof getVLANs>>, TError = HTTPValidationError>(params?: GetVLANsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVLANs>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVLANsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVLANs>>> = ({ signal }) => getVLANs(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVLANs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetVLANsQueryResult = NonNullable<Awaited<ReturnType<typeof getVLANs>>>
export type GetVLANsQueryError = HTTPValidationError


export function useGetVLANs<TData = Awaited<ReturnType<typeof getVLANs>>, TError = HTTPValidationError>(
 params: undefined |  GetVLANsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVLANs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVLANs>>,
          TError,
          Awaited<ReturnType<typeof getVLANs>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVLANs<TData = Awaited<ReturnType<typeof getVLANs>>, TError = HTTPValidationError>(
 params?: GetVLANsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVLANs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVLANs>>,
          TError,
          Awaited<ReturnType<typeof getVLANs>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVLANs<TData = Awaited<ReturnType<typeof getVLANs>>, TError = HTTPValidationError>(
 params?: GetVLANsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVLANs>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List All Vlans
 */

export function useGetVLANs<TData = Awaited<ReturnType<typeof getVLANs>>, TError = HTTPValidationError>(
 params?: GetVLANsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVLANs>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetVLANsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create Vlan
 */
export const createVLAN = (
    createVLAN: CreateVLAN,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<EachVLAN>(
      {url: "/api/network-management/vlan/", method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createVLAN, signal
    },
      );
    }
  


export const getCreateVLANMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createVLAN>>, TError,{data: CreateVLAN}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createVLAN>>, TError,{data: CreateVLAN}, TContext> => {

const mutationKey = ['createVLAN'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createVLAN>>, {data: CreateVLAN}> = (props) => {
          const {data} = props ?? {};

          return  createVLAN(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateVLANMutationResult = NonNullable<Awaited<ReturnType<typeof createVLAN>>>
    export type CreateVLANMutationBody = CreateVLAN
    export type CreateVLANMutationError = HTTPValidationError

    /**
 * @summary Create Vlan
 */
export const useCreateVLAN = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createVLAN>>, TError,{data: CreateVLAN}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createVLAN>>,
        TError,
        {data: CreateVLAN},
        TContext
      > => {

      const mutationOptions = getCreateVLANMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary List Single Vlan
 */
export const getVLAN = (
    vlanId: string,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<EachVLAN>(
      {url: `/api/network-management/vlan/${vlanId}`, method: 'GET', signal
    },
      );
    }
  

const getGetVLANQueryKey = (vlanId: string,) => {
    return [`/api/network-management/vlan/${vlanId}`] as const;
    }

    
export const getGetVLANQueryOptions = <TData = Awaited<ReturnType<typeof getVLAN>>, TError = HTTPValidationError>(vlanId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVLAN>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVLANQueryKey(vlanId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVLAN>>> = ({ signal }) => getVLAN(vlanId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(vlanId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVLAN>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetVLANQueryResult = NonNullable<Awaited<ReturnType<typeof getVLAN>>>
export type GetVLANQueryError = HTTPValidationError


export function useGetVLAN<TData = Awaited<ReturnType<typeof getVLAN>>, TError = HTTPValidationError>(
 vlanId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVLAN>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVLAN>>,
          TError,
          Awaited<ReturnType<typeof getVLAN>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVLAN<TData = Awaited<ReturnType<typeof getVLAN>>, TError = HTTPValidationError>(
 vlanId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVLAN>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVLAN>>,
          TError,
          Awaited<ReturnType<typeof getVLAN>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVLAN<TData = Awaited<ReturnType<typeof getVLAN>>, TError = HTTPValidationError>(
 vlanId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVLAN>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List Single Vlan
 */

export function useGetVLAN<TData = Awaited<ReturnType<typeof getVLAN>>, TError = HTTPValidationError>(
 vlanId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVLAN>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetVLANQueryOptions(vlanId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Vlan
 */
export const editVLAN = (
    vlanId: string,
    editVLAN: EditVLAN,
 ) => {
      
      
      return orvalMutator<EachVLAN>(
      {url: `/api/network-management/vlan/${vlanId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: editVLAN
    },
      );
    }
  


export const getEditVLANMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof editVLAN>>, TError,{vlanId: string;data: EditVLAN}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof editVLAN>>, TError,{vlanId: string;data: EditVLAN}, TContext> => {

const mutationKey = ['editVLAN'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof editVLAN>>, {vlanId: string;data: EditVLAN}> = (props) => {
          const {vlanId,data} = props ?? {};

          return  editVLAN(vlanId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EditVLANMutationResult = NonNullable<Awaited<ReturnType<typeof editVLAN>>>
    export type EditVLANMutationBody = EditVLAN
    export type EditVLANMutationError = HTTPValidationError

    /**
 * @summary Update Vlan
 */
export const useEditVLAN = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof editVLAN>>, TError,{vlanId: string;data: EditVLAN}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof editVLAN>>,
        TError,
        {vlanId: string;data: EditVLAN},
        TContext
      > => {

      const mutationOptions = getEditVLANMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete Vlan
 */
export const deleteVLAN = (
    vlanId: string,
 ) => {
      
      
      return orvalMutator<MessageOnlyResponse>(
      {url: `/api/network-management/vlan/${vlanId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteVLANMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVLAN>>, TError,{vlanId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteVLAN>>, TError,{vlanId: string}, TContext> => {

const mutationKey = ['deleteVLAN'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteVLAN>>, {vlanId: string}> = (props) => {
          const {vlanId} = props ?? {};

          return  deleteVLAN(vlanId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteVLANMutationResult = NonNullable<Awaited<ReturnType<typeof deleteVLAN>>>
    
    export type DeleteVLANMutationError = HTTPValidationError

    /**
 * @summary Delete Vlan
 */
export const useDeleteVLAN = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVLAN>>, TError,{vlanId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteVLAN>>,
        TError,
        {vlanId: string},
        TContext
      > => {

      const mutationOptions = getDeleteVLANMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    