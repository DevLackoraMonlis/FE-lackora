/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * MonoWatch BackBone
 * MonoWatch Security Asset Management - BackBone Structure
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  BodyGenerateAdapterAdpBasedOnTemplateCodeApiTemplateManagementTemplateIdGenerateTemplatePost,
  BodyValidateBaseTemplateZipStructureApiTemplateManagementTemplateIdValidateTemplatePost,
  DownloadTemplateResponse,
  GenerateTemplateADPResponse,
  HTTPValidationError,
  ListAllTemplatesApiTemplateManagementGetParams,
  ListSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGetParams,
  NewTemplateItem,
  PaginatedBaseResponseTemplateHistoryItem,
  PaginatedBaseResponseTemplateItem,
  TemplateItem,
  UpdateTemplateItem,
  ValidateAdapterResponse
} from './models';

import { orvalMutator } from '../orval-mutator';





/**
 * @summary List All Templates
 */
export const listAllTemplatesApiTemplateManagementGet = (
    params?: ListAllTemplatesApiTemplateManagementGetParams,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<PaginatedBaseResponseTemplateItem>(
      {url: `/api/template-management/`, method: 'GET',
        params, signal
    },
      );
    }
  

const getListAllTemplatesApiTemplateManagementGetQueryKey = (params?: ListAllTemplatesApiTemplateManagementGetParams,) => {
    return [`/api/template-management/`, ...(params ? [params]: [])] as const;
    }

    
export const getListAllTemplatesApiTemplateManagementGetQueryOptions = <TData = Awaited<ReturnType<typeof listAllTemplatesApiTemplateManagementGet>>, TError = HTTPValidationError>(params?: ListAllTemplatesApiTemplateManagementGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listAllTemplatesApiTemplateManagementGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListAllTemplatesApiTemplateManagementGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listAllTemplatesApiTemplateManagementGet>>> = ({ signal }) => listAllTemplatesApiTemplateManagementGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listAllTemplatesApiTemplateManagementGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListAllTemplatesApiTemplateManagementGetQueryResult = NonNullable<Awaited<ReturnType<typeof listAllTemplatesApiTemplateManagementGet>>>
export type ListAllTemplatesApiTemplateManagementGetQueryError = HTTPValidationError


export function useListAllTemplatesApiTemplateManagementGet<TData = Awaited<ReturnType<typeof listAllTemplatesApiTemplateManagementGet>>, TError = HTTPValidationError>(
 params: undefined |  ListAllTemplatesApiTemplateManagementGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listAllTemplatesApiTemplateManagementGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listAllTemplatesApiTemplateManagementGet>>,
          TError,
          Awaited<ReturnType<typeof listAllTemplatesApiTemplateManagementGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListAllTemplatesApiTemplateManagementGet<TData = Awaited<ReturnType<typeof listAllTemplatesApiTemplateManagementGet>>, TError = HTTPValidationError>(
 params?: ListAllTemplatesApiTemplateManagementGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listAllTemplatesApiTemplateManagementGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listAllTemplatesApiTemplateManagementGet>>,
          TError,
          Awaited<ReturnType<typeof listAllTemplatesApiTemplateManagementGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListAllTemplatesApiTemplateManagementGet<TData = Awaited<ReturnType<typeof listAllTemplatesApiTemplateManagementGet>>, TError = HTTPValidationError>(
 params?: ListAllTemplatesApiTemplateManagementGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listAllTemplatesApiTemplateManagementGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List All Templates
 */

export function useListAllTemplatesApiTemplateManagementGet<TData = Awaited<ReturnType<typeof listAllTemplatesApiTemplateManagementGet>>, TError = HTTPValidationError>(
 params?: ListAllTemplatesApiTemplateManagementGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listAllTemplatesApiTemplateManagementGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListAllTemplatesApiTemplateManagementGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create New Adapter Template
 */
export const createNewAdapterTemplateApiTemplateManagementPost = (
    newTemplateItem: NewTemplateItem,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<TemplateItem>(
      {url: `/api/template-management/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: newTemplateItem, signal
    },
      );
    }
  


export const getCreateNewAdapterTemplateApiTemplateManagementPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createNewAdapterTemplateApiTemplateManagementPost>>, TError,{data: NewTemplateItem}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createNewAdapterTemplateApiTemplateManagementPost>>, TError,{data: NewTemplateItem}, TContext> => {

const mutationKey = ['createNewAdapterTemplateApiTemplateManagementPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createNewAdapterTemplateApiTemplateManagementPost>>, {data: NewTemplateItem}> = (props) => {
          const {data} = props ?? {};

          return  createNewAdapterTemplateApiTemplateManagementPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateNewAdapterTemplateApiTemplateManagementPostMutationResult = NonNullable<Awaited<ReturnType<typeof createNewAdapterTemplateApiTemplateManagementPost>>>
    export type CreateNewAdapterTemplateApiTemplateManagementPostMutationBody = NewTemplateItem
    export type CreateNewAdapterTemplateApiTemplateManagementPostMutationError = HTTPValidationError

    /**
 * @summary Create New Adapter Template
 */
export const useCreateNewAdapterTemplateApiTemplateManagementPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createNewAdapterTemplateApiTemplateManagementPost>>, TError,{data: NewTemplateItem}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createNewAdapterTemplateApiTemplateManagementPost>>,
        TError,
        {data: NewTemplateItem},
        TContext
      > => {

      const mutationOptions = getCreateNewAdapterTemplateApiTemplateManagementPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get Single Template Information
 */
export const getSingleTemplateInformationApiTemplateManagementTemplateIdGet = (
    templateId: string,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<TemplateItem>(
      {url: `/api/template-management/${templateId}`, method: 'GET', signal
    },
      );
    }
  

const getGetSingleTemplateInformationApiTemplateManagementTemplateIdGetQueryKey = (templateId: string,) => {
    return [`/api/template-management/${templateId}`] as const;
    }

    
export const getGetSingleTemplateInformationApiTemplateManagementTemplateIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getSingleTemplateInformationApiTemplateManagementTemplateIdGet>>, TError = HTTPValidationError>(templateId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSingleTemplateInformationApiTemplateManagementTemplateIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSingleTemplateInformationApiTemplateManagementTemplateIdGetQueryKey(templateId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSingleTemplateInformationApiTemplateManagementTemplateIdGet>>> = ({ signal }) => getSingleTemplateInformationApiTemplateManagementTemplateIdGet(templateId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(templateId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSingleTemplateInformationApiTemplateManagementTemplateIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSingleTemplateInformationApiTemplateManagementTemplateIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getSingleTemplateInformationApiTemplateManagementTemplateIdGet>>>
export type GetSingleTemplateInformationApiTemplateManagementTemplateIdGetQueryError = HTTPValidationError


export function useGetSingleTemplateInformationApiTemplateManagementTemplateIdGet<TData = Awaited<ReturnType<typeof getSingleTemplateInformationApiTemplateManagementTemplateIdGet>>, TError = HTTPValidationError>(
 templateId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSingleTemplateInformationApiTemplateManagementTemplateIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSingleTemplateInformationApiTemplateManagementTemplateIdGet>>,
          TError,
          Awaited<ReturnType<typeof getSingleTemplateInformationApiTemplateManagementTemplateIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSingleTemplateInformationApiTemplateManagementTemplateIdGet<TData = Awaited<ReturnType<typeof getSingleTemplateInformationApiTemplateManagementTemplateIdGet>>, TError = HTTPValidationError>(
 templateId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSingleTemplateInformationApiTemplateManagementTemplateIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSingleTemplateInformationApiTemplateManagementTemplateIdGet>>,
          TError,
          Awaited<ReturnType<typeof getSingleTemplateInformationApiTemplateManagementTemplateIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSingleTemplateInformationApiTemplateManagementTemplateIdGet<TData = Awaited<ReturnType<typeof getSingleTemplateInformationApiTemplateManagementTemplateIdGet>>, TError = HTTPValidationError>(
 templateId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSingleTemplateInformationApiTemplateManagementTemplateIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Single Template Information
 */

export function useGetSingleTemplateInformationApiTemplateManagementTemplateIdGet<TData = Awaited<ReturnType<typeof getSingleTemplateInformationApiTemplateManagementTemplateIdGet>>, TError = HTTPValidationError>(
 templateId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSingleTemplateInformationApiTemplateManagementTemplateIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSingleTemplateInformationApiTemplateManagementTemplateIdGetQueryOptions(templateId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Single Template Information
 */
export const updateSingleTemplateInformationApiTemplateManagementTemplateIdPut = (
    templateId: string,
    updateTemplateItem: UpdateTemplateItem,
 ) => {
      
      
      return orvalMutator<TemplateItem>(
      {url: `/api/template-management/${templateId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateTemplateItem
    },
      );
    }
  


export const getUpdateSingleTemplateInformationApiTemplateManagementTemplateIdPutMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSingleTemplateInformationApiTemplateManagementTemplateIdPut>>, TError,{templateId: string;data: UpdateTemplateItem}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateSingleTemplateInformationApiTemplateManagementTemplateIdPut>>, TError,{templateId: string;data: UpdateTemplateItem}, TContext> => {

const mutationKey = ['updateSingleTemplateInformationApiTemplateManagementTemplateIdPut'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateSingleTemplateInformationApiTemplateManagementTemplateIdPut>>, {templateId: string;data: UpdateTemplateItem}> = (props) => {
          const {templateId,data} = props ?? {};

          return  updateSingleTemplateInformationApiTemplateManagementTemplateIdPut(templateId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateSingleTemplateInformationApiTemplateManagementTemplateIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateSingleTemplateInformationApiTemplateManagementTemplateIdPut>>>
    export type UpdateSingleTemplateInformationApiTemplateManagementTemplateIdPutMutationBody = UpdateTemplateItem
    export type UpdateSingleTemplateInformationApiTemplateManagementTemplateIdPutMutationError = HTTPValidationError

    /**
 * @summary Update Single Template Information
 */
export const useUpdateSingleTemplateInformationApiTemplateManagementTemplateIdPut = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSingleTemplateInformationApiTemplateManagementTemplateIdPut>>, TError,{templateId: string;data: UpdateTemplateItem}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateSingleTemplateInformationApiTemplateManagementTemplateIdPut>>,
        TError,
        {templateId: string;data: UpdateTemplateItem},
        TContext
      > => {

      const mutationOptions = getUpdateSingleTemplateInformationApiTemplateManagementTemplateIdPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete Single Template Data
 */
export const deleteSingleTemplateDataApiTemplateManagementTemplateIdDelete = (
    templateId: string,
 ) => {
      
      
      return orvalMutator<unknown>(
      {url: `/api/template-management/${templateId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteSingleTemplateDataApiTemplateManagementTemplateIdDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSingleTemplateDataApiTemplateManagementTemplateIdDelete>>, TError,{templateId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteSingleTemplateDataApiTemplateManagementTemplateIdDelete>>, TError,{templateId: string}, TContext> => {

const mutationKey = ['deleteSingleTemplateDataApiTemplateManagementTemplateIdDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSingleTemplateDataApiTemplateManagementTemplateIdDelete>>, {templateId: string}> = (props) => {
          const {templateId} = props ?? {};

          return  deleteSingleTemplateDataApiTemplateManagementTemplateIdDelete(templateId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSingleTemplateDataApiTemplateManagementTemplateIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSingleTemplateDataApiTemplateManagementTemplateIdDelete>>>
    
    export type DeleteSingleTemplateDataApiTemplateManagementTemplateIdDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Single Template Data
 */
export const useDeleteSingleTemplateDataApiTemplateManagementTemplateIdDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSingleTemplateDataApiTemplateManagementTemplateIdDelete>>, TError,{templateId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteSingleTemplateDataApiTemplateManagementTemplateIdDelete>>,
        TError,
        {templateId: string},
        TContext
      > => {

      const mutationOptions = getDeleteSingleTemplateDataApiTemplateManagementTemplateIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary List Single Template History Information
 */
export const listSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGet = (
    templateId: string | null,
    params?: ListSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGetParams,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<PaginatedBaseResponseTemplateHistoryItem>(
      {url: `/api/template-management/${templateId}/history`, method: 'GET',
        params, signal
    },
      );
    }
  

const getListSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGetQueryKey = (templateId: string | null,
    params?: ListSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGetParams,) => {
    return [`/api/template-management/${templateId}/history`, ...(params ? [params]: [])] as const;
    }

    
export const getListSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGetQueryOptions = <TData = Awaited<ReturnType<typeof listSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGet>>, TError = HTTPValidationError>(templateId: string | null,
    params?: ListSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGetQueryKey(templateId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGet>>> = ({ signal }) => listSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGet(templateId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(templateId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGetQueryResult = NonNullable<Awaited<ReturnType<typeof listSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGet>>>
export type ListSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGetQueryError = HTTPValidationError


export function useListSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGet<TData = Awaited<ReturnType<typeof listSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGet>>, TError = HTTPValidationError>(
 templateId: string | null,
    params: undefined |  ListSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGet>>,
          TError,
          Awaited<ReturnType<typeof listSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGet<TData = Awaited<ReturnType<typeof listSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGet>>, TError = HTTPValidationError>(
 templateId: string | null,
    params?: ListSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGet>>,
          TError,
          Awaited<ReturnType<typeof listSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGet<TData = Awaited<ReturnType<typeof listSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGet>>, TError = HTTPValidationError>(
 templateId: string | null,
    params?: ListSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List Single Template History Information
 */

export function useListSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGet<TData = Awaited<ReturnType<typeof listSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGet>>, TError = HTTPValidationError>(
 templateId: string | null,
    params?: ListSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListSingleTemplateHistoryInformationApiTemplateManagementTemplateIdHistoryGetQueryOptions(templateId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Download Single Template Code Sample
 */
export const downloadSingleTemplateCodeSampleApiTemplateManagementTemplateIdDownloadTemplateGet = (
    templateId: string,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<DownloadTemplateResponse>(
      {url: `/api/template-management/${templateId}/download-template`, method: 'GET', signal
    },
      );
    }
  

const getDownloadSingleTemplateCodeSampleApiTemplateManagementTemplateIdDownloadTemplateGetQueryKey = (templateId: string,) => {
    return [`/api/template-management/${templateId}/download-template`] as const;
    }

    
export const getDownloadSingleTemplateCodeSampleApiTemplateManagementTemplateIdDownloadTemplateGetQueryOptions = <TData = Awaited<ReturnType<typeof downloadSingleTemplateCodeSampleApiTemplateManagementTemplateIdDownloadTemplateGet>>, TError = HTTPValidationError>(templateId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadSingleTemplateCodeSampleApiTemplateManagementTemplateIdDownloadTemplateGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDownloadSingleTemplateCodeSampleApiTemplateManagementTemplateIdDownloadTemplateGetQueryKey(templateId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof downloadSingleTemplateCodeSampleApiTemplateManagementTemplateIdDownloadTemplateGet>>> = ({ signal }) => downloadSingleTemplateCodeSampleApiTemplateManagementTemplateIdDownloadTemplateGet(templateId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(templateId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof downloadSingleTemplateCodeSampleApiTemplateManagementTemplateIdDownloadTemplateGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DownloadSingleTemplateCodeSampleApiTemplateManagementTemplateIdDownloadTemplateGetQueryResult = NonNullable<Awaited<ReturnType<typeof downloadSingleTemplateCodeSampleApiTemplateManagementTemplateIdDownloadTemplateGet>>>
export type DownloadSingleTemplateCodeSampleApiTemplateManagementTemplateIdDownloadTemplateGetQueryError = HTTPValidationError


export function useDownloadSingleTemplateCodeSampleApiTemplateManagementTemplateIdDownloadTemplateGet<TData = Awaited<ReturnType<typeof downloadSingleTemplateCodeSampleApiTemplateManagementTemplateIdDownloadTemplateGet>>, TError = HTTPValidationError>(
 templateId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadSingleTemplateCodeSampleApiTemplateManagementTemplateIdDownloadTemplateGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof downloadSingleTemplateCodeSampleApiTemplateManagementTemplateIdDownloadTemplateGet>>,
          TError,
          Awaited<ReturnType<typeof downloadSingleTemplateCodeSampleApiTemplateManagementTemplateIdDownloadTemplateGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDownloadSingleTemplateCodeSampleApiTemplateManagementTemplateIdDownloadTemplateGet<TData = Awaited<ReturnType<typeof downloadSingleTemplateCodeSampleApiTemplateManagementTemplateIdDownloadTemplateGet>>, TError = HTTPValidationError>(
 templateId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadSingleTemplateCodeSampleApiTemplateManagementTemplateIdDownloadTemplateGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof downloadSingleTemplateCodeSampleApiTemplateManagementTemplateIdDownloadTemplateGet>>,
          TError,
          Awaited<ReturnType<typeof downloadSingleTemplateCodeSampleApiTemplateManagementTemplateIdDownloadTemplateGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDownloadSingleTemplateCodeSampleApiTemplateManagementTemplateIdDownloadTemplateGet<TData = Awaited<ReturnType<typeof downloadSingleTemplateCodeSampleApiTemplateManagementTemplateIdDownloadTemplateGet>>, TError = HTTPValidationError>(
 templateId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadSingleTemplateCodeSampleApiTemplateManagementTemplateIdDownloadTemplateGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Download Single Template Code Sample
 */

export function useDownloadSingleTemplateCodeSampleApiTemplateManagementTemplateIdDownloadTemplateGet<TData = Awaited<ReturnType<typeof downloadSingleTemplateCodeSampleApiTemplateManagementTemplateIdDownloadTemplateGet>>, TError = HTTPValidationError>(
 templateId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadSingleTemplateCodeSampleApiTemplateManagementTemplateIdDownloadTemplateGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDownloadSingleTemplateCodeSampleApiTemplateManagementTemplateIdDownloadTemplateGetQueryOptions(templateId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Validate Base Template Zip Structure
 */
export const validateBaseTemplateZipStructureApiTemplateManagementTemplateIdValidateTemplatePost = (
    templateId: string,
    bodyValidateBaseTemplateZipStructureApiTemplateManagementTemplateIdValidateTemplatePost: BodyValidateBaseTemplateZipStructureApiTemplateManagementTemplateIdValidateTemplatePost,
 signal?: AbortSignal
) => {
      
      const formData = new FormData();
formData.append(`file`, bodyValidateBaseTemplateZipStructureApiTemplateManagementTemplateIdValidateTemplatePost.file)

      return orvalMutator<ValidateAdapterResponse>(
      {url: `/api/template-management/${templateId}/validate-template`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      );
    }
  


export const getValidateBaseTemplateZipStructureApiTemplateManagementTemplateIdValidateTemplatePostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof validateBaseTemplateZipStructureApiTemplateManagementTemplateIdValidateTemplatePost>>, TError,{templateId: string;data: BodyValidateBaseTemplateZipStructureApiTemplateManagementTemplateIdValidateTemplatePost}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof validateBaseTemplateZipStructureApiTemplateManagementTemplateIdValidateTemplatePost>>, TError,{templateId: string;data: BodyValidateBaseTemplateZipStructureApiTemplateManagementTemplateIdValidateTemplatePost}, TContext> => {

const mutationKey = ['validateBaseTemplateZipStructureApiTemplateManagementTemplateIdValidateTemplatePost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof validateBaseTemplateZipStructureApiTemplateManagementTemplateIdValidateTemplatePost>>, {templateId: string;data: BodyValidateBaseTemplateZipStructureApiTemplateManagementTemplateIdValidateTemplatePost}> = (props) => {
          const {templateId,data} = props ?? {};

          return  validateBaseTemplateZipStructureApiTemplateManagementTemplateIdValidateTemplatePost(templateId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ValidateBaseTemplateZipStructureApiTemplateManagementTemplateIdValidateTemplatePostMutationResult = NonNullable<Awaited<ReturnType<typeof validateBaseTemplateZipStructureApiTemplateManagementTemplateIdValidateTemplatePost>>>
    export type ValidateBaseTemplateZipStructureApiTemplateManagementTemplateIdValidateTemplatePostMutationBody = BodyValidateBaseTemplateZipStructureApiTemplateManagementTemplateIdValidateTemplatePost
    export type ValidateBaseTemplateZipStructureApiTemplateManagementTemplateIdValidateTemplatePostMutationError = HTTPValidationError

    /**
 * @summary Validate Base Template Zip Structure
 */
export const useValidateBaseTemplateZipStructureApiTemplateManagementTemplateIdValidateTemplatePost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof validateBaseTemplateZipStructureApiTemplateManagementTemplateIdValidateTemplatePost>>, TError,{templateId: string;data: BodyValidateBaseTemplateZipStructureApiTemplateManagementTemplateIdValidateTemplatePost}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof validateBaseTemplateZipStructureApiTemplateManagementTemplateIdValidateTemplatePost>>,
        TError,
        {templateId: string;data: BodyValidateBaseTemplateZipStructureApiTemplateManagementTemplateIdValidateTemplatePost},
        TContext
      > => {

      const mutationOptions = getValidateBaseTemplateZipStructureApiTemplateManagementTemplateIdValidateTemplatePostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Generate Adapter Adp Based On Template Code
 */
export const generateAdapterAdpBasedOnTemplateCodeApiTemplateManagementTemplateIdGenerateTemplatePost = (
    templateId: string,
    bodyGenerateAdapterAdpBasedOnTemplateCodeApiTemplateManagementTemplateIdGenerateTemplatePost: BodyGenerateAdapterAdpBasedOnTemplateCodeApiTemplateManagementTemplateIdGenerateTemplatePost,
 signal?: AbortSignal
) => {
      
      const formData = new FormData();
formData.append(`file`, bodyGenerateAdapterAdpBasedOnTemplateCodeApiTemplateManagementTemplateIdGenerateTemplatePost.file)

      return orvalMutator<GenerateTemplateADPResponse>(
      {url: `/api/template-management/${templateId}/generate-template`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      );
    }
  


export const getGenerateAdapterAdpBasedOnTemplateCodeApiTemplateManagementTemplateIdGenerateTemplatePostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof generateAdapterAdpBasedOnTemplateCodeApiTemplateManagementTemplateIdGenerateTemplatePost>>, TError,{templateId: string;data: BodyGenerateAdapterAdpBasedOnTemplateCodeApiTemplateManagementTemplateIdGenerateTemplatePost}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof generateAdapterAdpBasedOnTemplateCodeApiTemplateManagementTemplateIdGenerateTemplatePost>>, TError,{templateId: string;data: BodyGenerateAdapterAdpBasedOnTemplateCodeApiTemplateManagementTemplateIdGenerateTemplatePost}, TContext> => {

const mutationKey = ['generateAdapterAdpBasedOnTemplateCodeApiTemplateManagementTemplateIdGenerateTemplatePost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof generateAdapterAdpBasedOnTemplateCodeApiTemplateManagementTemplateIdGenerateTemplatePost>>, {templateId: string;data: BodyGenerateAdapterAdpBasedOnTemplateCodeApiTemplateManagementTemplateIdGenerateTemplatePost}> = (props) => {
          const {templateId,data} = props ?? {};

          return  generateAdapterAdpBasedOnTemplateCodeApiTemplateManagementTemplateIdGenerateTemplatePost(templateId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GenerateAdapterAdpBasedOnTemplateCodeApiTemplateManagementTemplateIdGenerateTemplatePostMutationResult = NonNullable<Awaited<ReturnType<typeof generateAdapterAdpBasedOnTemplateCodeApiTemplateManagementTemplateIdGenerateTemplatePost>>>
    export type GenerateAdapterAdpBasedOnTemplateCodeApiTemplateManagementTemplateIdGenerateTemplatePostMutationBody = BodyGenerateAdapterAdpBasedOnTemplateCodeApiTemplateManagementTemplateIdGenerateTemplatePost
    export type GenerateAdapterAdpBasedOnTemplateCodeApiTemplateManagementTemplateIdGenerateTemplatePostMutationError = HTTPValidationError

    /**
 * @summary Generate Adapter Adp Based On Template Code
 */
export const useGenerateAdapterAdpBasedOnTemplateCodeApiTemplateManagementTemplateIdGenerateTemplatePost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof generateAdapterAdpBasedOnTemplateCodeApiTemplateManagementTemplateIdGenerateTemplatePost>>, TError,{templateId: string;data: BodyGenerateAdapterAdpBasedOnTemplateCodeApiTemplateManagementTemplateIdGenerateTemplatePost}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof generateAdapterAdpBasedOnTemplateCodeApiTemplateManagementTemplateIdGenerateTemplatePost>>,
        TError,
        {templateId: string;data: BodyGenerateAdapterAdpBasedOnTemplateCodeApiTemplateManagementTemplateIdGenerateTemplatePost},
        TContext
      > => {

      const mutationOptions = getGenerateAdapterAdpBasedOnTemplateCodeApiTemplateManagementTemplateIdGenerateTemplatePostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Download Adapter Last Adp Version File
 */
export const downloadAdapterLastAdpVersionFileApiTemplateManagementTemplateIdDownloadAdapterGet = (
    templateId: string,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<DownloadTemplateResponse>(
      {url: `/api/template-management/${templateId}/download-adapter`, method: 'GET', signal
    },
      );
    }
  

const getDownloadAdapterLastAdpVersionFileApiTemplateManagementTemplateIdDownloadAdapterGetQueryKey = (templateId: string,) => {
    return [`/api/template-management/${templateId}/download-adapter`] as const;
    }

    
export const getDownloadAdapterLastAdpVersionFileApiTemplateManagementTemplateIdDownloadAdapterGetQueryOptions = <TData = Awaited<ReturnType<typeof downloadAdapterLastAdpVersionFileApiTemplateManagementTemplateIdDownloadAdapterGet>>, TError = HTTPValidationError>(templateId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadAdapterLastAdpVersionFileApiTemplateManagementTemplateIdDownloadAdapterGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDownloadAdapterLastAdpVersionFileApiTemplateManagementTemplateIdDownloadAdapterGetQueryKey(templateId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof downloadAdapterLastAdpVersionFileApiTemplateManagementTemplateIdDownloadAdapterGet>>> = ({ signal }) => downloadAdapterLastAdpVersionFileApiTemplateManagementTemplateIdDownloadAdapterGet(templateId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(templateId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof downloadAdapterLastAdpVersionFileApiTemplateManagementTemplateIdDownloadAdapterGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DownloadAdapterLastAdpVersionFileApiTemplateManagementTemplateIdDownloadAdapterGetQueryResult = NonNullable<Awaited<ReturnType<typeof downloadAdapterLastAdpVersionFileApiTemplateManagementTemplateIdDownloadAdapterGet>>>
export type DownloadAdapterLastAdpVersionFileApiTemplateManagementTemplateIdDownloadAdapterGetQueryError = HTTPValidationError


export function useDownloadAdapterLastAdpVersionFileApiTemplateManagementTemplateIdDownloadAdapterGet<TData = Awaited<ReturnType<typeof downloadAdapterLastAdpVersionFileApiTemplateManagementTemplateIdDownloadAdapterGet>>, TError = HTTPValidationError>(
 templateId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadAdapterLastAdpVersionFileApiTemplateManagementTemplateIdDownloadAdapterGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof downloadAdapterLastAdpVersionFileApiTemplateManagementTemplateIdDownloadAdapterGet>>,
          TError,
          Awaited<ReturnType<typeof downloadAdapterLastAdpVersionFileApiTemplateManagementTemplateIdDownloadAdapterGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDownloadAdapterLastAdpVersionFileApiTemplateManagementTemplateIdDownloadAdapterGet<TData = Awaited<ReturnType<typeof downloadAdapterLastAdpVersionFileApiTemplateManagementTemplateIdDownloadAdapterGet>>, TError = HTTPValidationError>(
 templateId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadAdapterLastAdpVersionFileApiTemplateManagementTemplateIdDownloadAdapterGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof downloadAdapterLastAdpVersionFileApiTemplateManagementTemplateIdDownloadAdapterGet>>,
          TError,
          Awaited<ReturnType<typeof downloadAdapterLastAdpVersionFileApiTemplateManagementTemplateIdDownloadAdapterGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDownloadAdapterLastAdpVersionFileApiTemplateManagementTemplateIdDownloadAdapterGet<TData = Awaited<ReturnType<typeof downloadAdapterLastAdpVersionFileApiTemplateManagementTemplateIdDownloadAdapterGet>>, TError = HTTPValidationError>(
 templateId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadAdapterLastAdpVersionFileApiTemplateManagementTemplateIdDownloadAdapterGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Download Adapter Last Adp Version File
 */

export function useDownloadAdapterLastAdpVersionFileApiTemplateManagementTemplateIdDownloadAdapterGet<TData = Awaited<ReturnType<typeof downloadAdapterLastAdpVersionFileApiTemplateManagementTemplateIdDownloadAdapterGet>>, TError = HTTPValidationError>(
 templateId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadAdapterLastAdpVersionFileApiTemplateManagementTemplateIdDownloadAdapterGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDownloadAdapterLastAdpVersionFileApiTemplateManagementTemplateIdDownloadAdapterGetQueryOptions(templateId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



