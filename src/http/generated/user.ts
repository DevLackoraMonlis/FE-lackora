/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * LACKORA API
 * LACKORA Advanced REST API
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AddUserCommand,
  UpdateUserCommand,
  UserPagedParams
} from './models';

import { orvalMutator } from '../orval-mutator';





/**
 * @summary Adds a new user.
Returns the new UserId.
 */
export const userAdd = (
    addUserCommand: AddUserCommand,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<void>(
      {url: `/api/v1/User/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: addUserCommand, signal
    },
      );
    }
  


export const getUserAddMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userAdd>>, TError,{data: AddUserCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof userAdd>>, TError,{data: AddUserCommand}, TContext> => {

const mutationKey = ['userAdd'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userAdd>>, {data: AddUserCommand}> = (props) => {
          const {data} = props ?? {};

          return  userAdd(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UserAddMutationResult = NonNullable<Awaited<ReturnType<typeof userAdd>>>
    export type UserAddMutationBody = AddUserCommand
    export type UserAddMutationError = unknown

    /**
 * @summary Adds a new user.
Returns the new UserId.
 */
export const useUserAdd = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userAdd>>, TError,{data: AddUserCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof userAdd>>,
        TError,
        {data: AddUserCommand},
        TContext
      > => {

      const mutationOptions = getUserAddMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Updates user info.
Returns true if successful.
 */
export const userUpdate = (
    updateUserCommand: UpdateUserCommand,
 ) => {
      
      
      return orvalMutator<void>(
      {url: `/api/v1/User/update`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateUserCommand
    },
      );
    }
  


export const getUserUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userUpdate>>, TError,{data: UpdateUserCommand}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof userUpdate>>, TError,{data: UpdateUserCommand}, TContext> => {

const mutationKey = ['userUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userUpdate>>, {data: UpdateUserCommand}> = (props) => {
          const {data} = props ?? {};

          return  userUpdate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UserUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof userUpdate>>>
    export type UserUpdateMutationBody = UpdateUserCommand
    export type UserUpdateMutationError = unknown

    /**
 * @summary Updates user info.
Returns true if successful.
 */
export const useUserUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userUpdate>>, TError,{data: UpdateUserCommand}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof userUpdate>>,
        TError,
        {data: UpdateUserCommand},
        TContext
      > => {

      const mutationOptions = getUserUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Retrieves a user by Id.
 */
export const userUserById = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<void>(
      {url: `/api/v1/User/${id}`, method: 'GET', signal
    },
      );
    }
  

const getUserUserByIdQueryKey = (id: string,) => {
    return [`/api/v1/User/${id}`] as const;
    }

    
export const getUserUserByIdQueryOptions = <TData = Awaited<ReturnType<typeof userUserById>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof userUserById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUserUserByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof userUserById>>> = ({ signal }) => userUserById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof userUserById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UserUserByIdQueryResult = NonNullable<Awaited<ReturnType<typeof userUserById>>>
export type UserUserByIdQueryError = unknown


export function useUserUserById<TData = Awaited<ReturnType<typeof userUserById>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof userUserById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userUserById>>,
          TError,
          Awaited<ReturnType<typeof userUserById>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUserUserById<TData = Awaited<ReturnType<typeof userUserById>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof userUserById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userUserById>>,
          TError,
          Awaited<ReturnType<typeof userUserById>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUserUserById<TData = Awaited<ReturnType<typeof userUserById>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof userUserById>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retrieves a user by Id.
 */

export function useUserUserById<TData = Awaited<ReturnType<typeof userUserById>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof userUserById>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getUserUserByIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Retrieves users with pagination, filtering and sorting.
 */
export const userPaged = (
    params?: UserPagedParams,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<void>(
      {url: `/api/v1/User/paged`, method: 'GET',
        params, signal
    },
      );
    }
  

const getUserPagedQueryKey = (params?: UserPagedParams,) => {
    return [`/api/v1/User/paged`, ...(params ? [params]: [])] as const;
    }

    
export const getUserPagedQueryOptions = <TData = Awaited<ReturnType<typeof userPaged>>, TError = unknown>(params?: UserPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof userPaged>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUserPagedQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof userPaged>>> = ({ signal }) => userPaged(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof userPaged>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UserPagedQueryResult = NonNullable<Awaited<ReturnType<typeof userPaged>>>
export type UserPagedQueryError = unknown


export function useUserPaged<TData = Awaited<ReturnType<typeof userPaged>>, TError = unknown>(
 params: undefined |  UserPagedParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof userPaged>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userPaged>>,
          TError,
          Awaited<ReturnType<typeof userPaged>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUserPaged<TData = Awaited<ReturnType<typeof userPaged>>, TError = unknown>(
 params?: UserPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof userPaged>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userPaged>>,
          TError,
          Awaited<ReturnType<typeof userPaged>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUserPaged<TData = Awaited<ReturnType<typeof userPaged>>, TError = unknown>(
 params?: UserPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof userPaged>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retrieves users with pagination, filtering and sorting.
 */

export function useUserPaged<TData = Awaited<ReturnType<typeof userPaged>>, TError = unknown>(
 params?: UserPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof userPaged>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getUserPagedQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



