/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * MonoWatch BackBone
 * MonoWatch Security Asset Management
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateVRF,
  EachVRF,
  GetVRFsParams,
  HTTPValidationError,
  MessageOnlyResponse,
  PaginatedBaseResponseEachVRFEachListMetadataWrapper
} from './models';

import { orvalMutator } from '../orval-mutator';





/**
 * @summary List All Vrfs
 */
export const getVRFs = (
    params?: GetVRFsParams,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<PaginatedBaseResponseEachVRFEachListMetadataWrapper>(
      {url: "/api/network-management/vrf/", method: 'GET',
        params, signal
    },
      );
    }
  

const getGetVRFsQueryKey = (params?: GetVRFsParams,) => {
    return ["/api/network-management/vrf/", ...(params ? [params]: [])] as const;
    }

    
export const getGetVRFsQueryOptions = <TData = Awaited<ReturnType<typeof getVRFs>>, TError = HTTPValidationError>(params?: GetVRFsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVRFs>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVRFsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVRFs>>> = ({ signal }) => getVRFs(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVRFs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetVRFsQueryResult = NonNullable<Awaited<ReturnType<typeof getVRFs>>>
export type GetVRFsQueryError = HTTPValidationError


export function useGetVRFs<TData = Awaited<ReturnType<typeof getVRFs>>, TError = HTTPValidationError>(
 params: undefined |  GetVRFsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVRFs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVRFs>>,
          TError,
          Awaited<ReturnType<typeof getVRFs>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVRFs<TData = Awaited<ReturnType<typeof getVRFs>>, TError = HTTPValidationError>(
 params?: GetVRFsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVRFs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVRFs>>,
          TError,
          Awaited<ReturnType<typeof getVRFs>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVRFs<TData = Awaited<ReturnType<typeof getVRFs>>, TError = HTTPValidationError>(
 params?: GetVRFsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVRFs>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List All Vrfs
 */

export function useGetVRFs<TData = Awaited<ReturnType<typeof getVRFs>>, TError = HTTPValidationError>(
 params?: GetVRFsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVRFs>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetVRFsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create Vrf
 */
export const createVRF = (
    createVRF: CreateVRF,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<EachVRF>(
      {url: "/api/network-management/vrf/", method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createVRF, signal
    },
      );
    }
  


export const getCreateVRFMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createVRF>>, TError,{data: CreateVRF}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createVRF>>, TError,{data: CreateVRF}, TContext> => {

const mutationKey = ['createVRF'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createVRF>>, {data: CreateVRF}> = (props) => {
          const {data} = props ?? {};

          return  createVRF(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateVRFMutationResult = NonNullable<Awaited<ReturnType<typeof createVRF>>>
    export type CreateVRFMutationBody = CreateVRF
    export type CreateVRFMutationError = HTTPValidationError

    /**
 * @summary Create Vrf
 */
export const useCreateVRF = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createVRF>>, TError,{data: CreateVRF}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createVRF>>,
        TError,
        {data: CreateVRF},
        TContext
      > => {

      const mutationOptions = getCreateVRFMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary List Single Vrf
 */
export const getVRF = (
    vrfId: string,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<EachVRF>(
      {url: `/api/network-management/vrf/${vrfId}`, method: 'GET', signal
    },
      );
    }
  

const getGetVRFQueryKey = (vrfId: string,) => {
    return [`/api/network-management/vrf/${vrfId}`] as const;
    }

    
export const getGetVRFQueryOptions = <TData = Awaited<ReturnType<typeof getVRF>>, TError = HTTPValidationError>(vrfId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVRF>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVRFQueryKey(vrfId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVRF>>> = ({ signal }) => getVRF(vrfId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(vrfId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVRF>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetVRFQueryResult = NonNullable<Awaited<ReturnType<typeof getVRF>>>
export type GetVRFQueryError = HTTPValidationError


export function useGetVRF<TData = Awaited<ReturnType<typeof getVRF>>, TError = HTTPValidationError>(
 vrfId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVRF>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVRF>>,
          TError,
          Awaited<ReturnType<typeof getVRF>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVRF<TData = Awaited<ReturnType<typeof getVRF>>, TError = HTTPValidationError>(
 vrfId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVRF>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVRF>>,
          TError,
          Awaited<ReturnType<typeof getVRF>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVRF<TData = Awaited<ReturnType<typeof getVRF>>, TError = HTTPValidationError>(
 vrfId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVRF>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List Single Vrf
 */

export function useGetVRF<TData = Awaited<ReturnType<typeof getVRF>>, TError = HTTPValidationError>(
 vrfId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVRF>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetVRFQueryOptions(vrfId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Vrf
 */
export const editVRF = (
    vrfId: string,
    createVRF: CreateVRF,
 ) => {
      
      
      return orvalMutator<EachVRF>(
      {url: `/api/network-management/vrf/${vrfId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: createVRF
    },
      );
    }
  


export const getEditVRFMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof editVRF>>, TError,{vrfId: string;data: CreateVRF}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof editVRF>>, TError,{vrfId: string;data: CreateVRF}, TContext> => {

const mutationKey = ['editVRF'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof editVRF>>, {vrfId: string;data: CreateVRF}> = (props) => {
          const {vrfId,data} = props ?? {};

          return  editVRF(vrfId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EditVRFMutationResult = NonNullable<Awaited<ReturnType<typeof editVRF>>>
    export type EditVRFMutationBody = CreateVRF
    export type EditVRFMutationError = HTTPValidationError

    /**
 * @summary Update Vrf
 */
export const useEditVRF = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof editVRF>>, TError,{vrfId: string;data: CreateVRF}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof editVRF>>,
        TError,
        {vrfId: string;data: CreateVRF},
        TContext
      > => {

      const mutationOptions = getEditVRFMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete Vrf
 */
export const deleteVRF = (
    vrfId: string,
 ) => {
      
      
      return orvalMutator<MessageOnlyResponse>(
      {url: `/api/network-management/vrf/${vrfId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteVRFMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVRF>>, TError,{vrfId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteVRF>>, TError,{vrfId: string}, TContext> => {

const mutationKey = ['deleteVRF'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteVRF>>, {vrfId: string}> = (props) => {
          const {vrfId} = props ?? {};

          return  deleteVRF(vrfId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteVRFMutationResult = NonNullable<Awaited<ReturnType<typeof deleteVRF>>>
    
    export type DeleteVRFMutationError = HTTPValidationError

    /**
 * @summary Delete Vrf
 */
export const useDeleteVRF = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVRF>>, TError,{vrfId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteVRF>>,
        TError,
        {vrfId: string},
        TContext
      > => {

      const mutationOptions = getDeleteVRFMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    