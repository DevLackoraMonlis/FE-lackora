/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * MonoWatch BackBone
 * MonoWatch Security Asset Management
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ChangeAdapterStatusRequest,
  CreateAdapterConfigurationRequest,
  CreateAdapterConfigurationResponse,
  DeleteAdapterConfigurationRequest,
  DiscoverySettingConfigurationTestConnectionParams,
  DiscoverySettingRunNowParams,
  DiscoverySettingsRunNowResponse,
  EachDiscoverySetting,
  GetDiscoverySettingsParams,
  HTTPValidationError,
  MessageOnlyResponse,
  MessageStatusOnlyResponse,
  PaginatedBaseResponseEachAdapterConfigurationNoneType,
  PaginatedBaseResponseEachDiscoverySettingEachListMetadataWrapper,
  UpdateAdapterConfigurationRequest
} from './models';

import { orvalMutator } from '../orval-mutator';





/**
 * @summary List All Discovery Settings Adapters
 */
export const getDiscoverySettings = (
    params?: GetDiscoverySettingsParams,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<PaginatedBaseResponseEachDiscoverySettingEachListMetadataWrapper>(
      {url: "/api/asset-identification/discovery-settings/", method: 'GET',
        params, signal
    },
      );
    }
  

const getGetDiscoverySettingsQueryKey = (params?: GetDiscoverySettingsParams,) => {
    return ["/api/asset-identification/discovery-settings/", ...(params ? [params]: [])] as const;
    }

    
export const getGetDiscoverySettingsQueryOptions = <TData = Awaited<ReturnType<typeof getDiscoverySettings>>, TError = HTTPValidationError>(params?: GetDiscoverySettingsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiscoverySettings>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDiscoverySettingsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDiscoverySettings>>> = ({ signal }) => getDiscoverySettings(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDiscoverySettings>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetDiscoverySettingsQueryResult = NonNullable<Awaited<ReturnType<typeof getDiscoverySettings>>>
export type GetDiscoverySettingsQueryError = HTTPValidationError


export function useGetDiscoverySettings<TData = Awaited<ReturnType<typeof getDiscoverySettings>>, TError = HTTPValidationError>(
 params: undefined |  GetDiscoverySettingsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiscoverySettings>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDiscoverySettings>>,
          TError,
          Awaited<ReturnType<typeof getDiscoverySettings>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDiscoverySettings<TData = Awaited<ReturnType<typeof getDiscoverySettings>>, TError = HTTPValidationError>(
 params?: GetDiscoverySettingsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiscoverySettings>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDiscoverySettings>>,
          TError,
          Awaited<ReturnType<typeof getDiscoverySettings>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDiscoverySettings<TData = Awaited<ReturnType<typeof getDiscoverySettings>>, TError = HTTPValidationError>(
 params?: GetDiscoverySettingsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiscoverySettings>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List All Discovery Settings Adapters
 */

export function useGetDiscoverySettings<TData = Awaited<ReturnType<typeof getDiscoverySettings>>, TError = HTTPValidationError>(
 params?: GetDiscoverySettingsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiscoverySettings>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetDiscoverySettingsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary List All Adapter Configurations
 */
export const getDiscoverySettingConfigurations = (
    adapterId: string,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<PaginatedBaseResponseEachAdapterConfigurationNoneType>(
      {url: `/api/asset-identification/discovery-settings/${adapterId}/configurations`, method: 'GET', signal
    },
      );
    }
  

const getGetDiscoverySettingConfigurationsQueryKey = (adapterId: string,) => {
    return [`/api/asset-identification/discovery-settings/${adapterId}/configurations`] as const;
    }

    
export const getGetDiscoverySettingConfigurationsQueryOptions = <TData = Awaited<ReturnType<typeof getDiscoverySettingConfigurations>>, TError = HTTPValidationError>(adapterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiscoverySettingConfigurations>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDiscoverySettingConfigurationsQueryKey(adapterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDiscoverySettingConfigurations>>> = ({ signal }) => getDiscoverySettingConfigurations(adapterId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(adapterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDiscoverySettingConfigurations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetDiscoverySettingConfigurationsQueryResult = NonNullable<Awaited<ReturnType<typeof getDiscoverySettingConfigurations>>>
export type GetDiscoverySettingConfigurationsQueryError = HTTPValidationError


export function useGetDiscoverySettingConfigurations<TData = Awaited<ReturnType<typeof getDiscoverySettingConfigurations>>, TError = HTTPValidationError>(
 adapterId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiscoverySettingConfigurations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDiscoverySettingConfigurations>>,
          TError,
          Awaited<ReturnType<typeof getDiscoverySettingConfigurations>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDiscoverySettingConfigurations<TData = Awaited<ReturnType<typeof getDiscoverySettingConfigurations>>, TError = HTTPValidationError>(
 adapterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiscoverySettingConfigurations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDiscoverySettingConfigurations>>,
          TError,
          Awaited<ReturnType<typeof getDiscoverySettingConfigurations>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDiscoverySettingConfigurations<TData = Awaited<ReturnType<typeof getDiscoverySettingConfigurations>>, TError = HTTPValidationError>(
 adapterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiscoverySettingConfigurations>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List All Adapter Configurations
 */

export function useGetDiscoverySettingConfigurations<TData = Awaited<ReturnType<typeof getDiscoverySettingConfigurations>>, TError = HTTPValidationError>(
 adapterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiscoverySettingConfigurations>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetDiscoverySettingConfigurationsQueryOptions(adapterId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create Adapter Configurations
 */
export const createDiscoverySettingConfiguration = (
    adapterId: string,
    createAdapterConfigurationRequest: CreateAdapterConfigurationRequest,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<CreateAdapterConfigurationResponse>(
      {url: `/api/asset-identification/discovery-settings/${adapterId}/configurations`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createAdapterConfigurationRequest, signal
    },
      );
    }
  


export const getCreateDiscoverySettingConfigurationMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createDiscoverySettingConfiguration>>, TError,{adapterId: string;data: CreateAdapterConfigurationRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createDiscoverySettingConfiguration>>, TError,{adapterId: string;data: CreateAdapterConfigurationRequest}, TContext> => {

const mutationKey = ['createDiscoverySettingConfiguration'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createDiscoverySettingConfiguration>>, {adapterId: string;data: CreateAdapterConfigurationRequest}> = (props) => {
          const {adapterId,data} = props ?? {};

          return  createDiscoverySettingConfiguration(adapterId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateDiscoverySettingConfigurationMutationResult = NonNullable<Awaited<ReturnType<typeof createDiscoverySettingConfiguration>>>
    export type CreateDiscoverySettingConfigurationMutationBody = CreateAdapterConfigurationRequest
    export type CreateDiscoverySettingConfigurationMutationError = HTTPValidationError

    /**
 * @summary Create Adapter Configurations
 */
export const useCreateDiscoverySettingConfiguration = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createDiscoverySettingConfiguration>>, TError,{adapterId: string;data: CreateAdapterConfigurationRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createDiscoverySettingConfiguration>>,
        TError,
        {adapterId: string;data: CreateAdapterConfigurationRequest},
        TContext
      > => {

      const mutationOptions = getCreateDiscoverySettingConfigurationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Edit Adapter Configurations
 */
export const editDiscoverySettingConfiguration = (
    adapterId: string,
    updateAdapterConfigurationRequest: UpdateAdapterConfigurationRequest,
 ) => {
      
      
      return orvalMutator<CreateAdapterConfigurationResponse>(
      {url: `/api/asset-identification/discovery-settings/${adapterId}/configurations`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateAdapterConfigurationRequest
    },
      );
    }
  


export const getEditDiscoverySettingConfigurationMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof editDiscoverySettingConfiguration>>, TError,{adapterId: string;data: UpdateAdapterConfigurationRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof editDiscoverySettingConfiguration>>, TError,{adapterId: string;data: UpdateAdapterConfigurationRequest}, TContext> => {

const mutationKey = ['editDiscoverySettingConfiguration'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof editDiscoverySettingConfiguration>>, {adapterId: string;data: UpdateAdapterConfigurationRequest}> = (props) => {
          const {adapterId,data} = props ?? {};

          return  editDiscoverySettingConfiguration(adapterId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EditDiscoverySettingConfigurationMutationResult = NonNullable<Awaited<ReturnType<typeof editDiscoverySettingConfiguration>>>
    export type EditDiscoverySettingConfigurationMutationBody = UpdateAdapterConfigurationRequest
    export type EditDiscoverySettingConfigurationMutationError = HTTPValidationError

    /**
 * @summary Edit Adapter Configurations
 */
export const useEditDiscoverySettingConfiguration = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof editDiscoverySettingConfiguration>>, TError,{adapterId: string;data: UpdateAdapterConfigurationRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof editDiscoverySettingConfiguration>>,
        TError,
        {adapterId: string;data: UpdateAdapterConfigurationRequest},
        TContext
      > => {

      const mutationOptions = getEditDiscoverySettingConfigurationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete Adapter Configurations
 */
export const deleteDiscoverySettingConfiguration = (
    adapterId: string,
    deleteAdapterConfigurationRequest: DeleteAdapterConfigurationRequest,
 ) => {
      
      
      return orvalMutator<MessageOnlyResponse>(
      {url: `/api/asset-identification/discovery-settings/${adapterId}/configurations`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: deleteAdapterConfigurationRequest
    },
      );
    }
  


export const getDeleteDiscoverySettingConfigurationMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDiscoverySettingConfiguration>>, TError,{adapterId: string;data: DeleteAdapterConfigurationRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteDiscoverySettingConfiguration>>, TError,{adapterId: string;data: DeleteAdapterConfigurationRequest}, TContext> => {

const mutationKey = ['deleteDiscoverySettingConfiguration'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDiscoverySettingConfiguration>>, {adapterId: string;data: DeleteAdapterConfigurationRequest}> = (props) => {
          const {adapterId,data} = props ?? {};

          return  deleteDiscoverySettingConfiguration(adapterId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDiscoverySettingConfigurationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDiscoverySettingConfiguration>>>
    export type DeleteDiscoverySettingConfigurationMutationBody = DeleteAdapterConfigurationRequest
    export type DeleteDiscoverySettingConfigurationMutationError = HTTPValidationError

    /**
 * @summary Delete Adapter Configurations
 */
export const useDeleteDiscoverySettingConfiguration = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDiscoverySettingConfiguration>>, TError,{adapterId: string;data: DeleteAdapterConfigurationRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteDiscoverySettingConfiguration>>,
        TError,
        {adapterId: string;data: DeleteAdapterConfigurationRequest},
        TContext
      > => {

      const mutationOptions = getDeleteDiscoverySettingConfigurationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Change Adapter Active Status
 */
export const editDiscoverySettingStatus = (
    adapterId: string,
    changeAdapterStatusRequest: ChangeAdapterStatusRequest,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<EachDiscoverySetting>(
      {url: `/api/asset-identification/discovery-settings/${adapterId}/change-status`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: changeAdapterStatusRequest, signal
    },
      );
    }
  


export const getEditDiscoverySettingStatusMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof editDiscoverySettingStatus>>, TError,{adapterId: string;data: ChangeAdapterStatusRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof editDiscoverySettingStatus>>, TError,{adapterId: string;data: ChangeAdapterStatusRequest}, TContext> => {

const mutationKey = ['editDiscoverySettingStatus'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof editDiscoverySettingStatus>>, {adapterId: string;data: ChangeAdapterStatusRequest}> = (props) => {
          const {adapterId,data} = props ?? {};

          return  editDiscoverySettingStatus(adapterId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EditDiscoverySettingStatusMutationResult = NonNullable<Awaited<ReturnType<typeof editDiscoverySettingStatus>>>
    export type EditDiscoverySettingStatusMutationBody = ChangeAdapterStatusRequest
    export type EditDiscoverySettingStatusMutationError = HTTPValidationError

    /**
 * @summary Change Adapter Active Status
 */
export const useEditDiscoverySettingStatus = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof editDiscoverySettingStatus>>, TError,{adapterId: string;data: ChangeAdapterStatusRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof editDiscoverySettingStatus>>,
        TError,
        {adapterId: string;data: ChangeAdapterStatusRequest},
        TContext
      > => {

      const mutationOptions = getEditDiscoverySettingStatusMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Discovery Setting Test Connection
 */
export const discoverySettingConfigurationTestConnection = (
    adapterId: string,
    params: DiscoverySettingConfigurationTestConnectionParams,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<MessageStatusOnlyResponse>(
      {url: `/api/asset-identification/discovery-settings/${adapterId}/test-connection`, method: 'GET',
        params, signal
    },
      );
    }
  

const getDiscoverySettingConfigurationTestConnectionQueryKey = (adapterId: string,
    params: DiscoverySettingConfigurationTestConnectionParams,) => {
    return [`/api/asset-identification/discovery-settings/${adapterId}/test-connection`, ...(params ? [params]: [])] as const;
    }

    
export const getDiscoverySettingConfigurationTestConnectionQueryOptions = <TData = Awaited<ReturnType<typeof discoverySettingConfigurationTestConnection>>, TError = HTTPValidationError>(adapterId: string,
    params: DiscoverySettingConfigurationTestConnectionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof discoverySettingConfigurationTestConnection>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDiscoverySettingConfigurationTestConnectionQueryKey(adapterId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof discoverySettingConfigurationTestConnection>>> = ({ signal }) => discoverySettingConfigurationTestConnection(adapterId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(adapterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof discoverySettingConfigurationTestConnection>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DiscoverySettingConfigurationTestConnectionQueryResult = NonNullable<Awaited<ReturnType<typeof discoverySettingConfigurationTestConnection>>>
export type DiscoverySettingConfigurationTestConnectionQueryError = HTTPValidationError


export function useDiscoverySettingConfigurationTestConnection<TData = Awaited<ReturnType<typeof discoverySettingConfigurationTestConnection>>, TError = HTTPValidationError>(
 adapterId: string,
    params: DiscoverySettingConfigurationTestConnectionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof discoverySettingConfigurationTestConnection>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof discoverySettingConfigurationTestConnection>>,
          TError,
          Awaited<ReturnType<typeof discoverySettingConfigurationTestConnection>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDiscoverySettingConfigurationTestConnection<TData = Awaited<ReturnType<typeof discoverySettingConfigurationTestConnection>>, TError = HTTPValidationError>(
 adapterId: string,
    params: DiscoverySettingConfigurationTestConnectionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof discoverySettingConfigurationTestConnection>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof discoverySettingConfigurationTestConnection>>,
          TError,
          Awaited<ReturnType<typeof discoverySettingConfigurationTestConnection>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDiscoverySettingConfigurationTestConnection<TData = Awaited<ReturnType<typeof discoverySettingConfigurationTestConnection>>, TError = HTTPValidationError>(
 adapterId: string,
    params: DiscoverySettingConfigurationTestConnectionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof discoverySettingConfigurationTestConnection>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Discovery Setting Test Connection
 */

export function useDiscoverySettingConfigurationTestConnection<TData = Awaited<ReturnType<typeof discoverySettingConfigurationTestConnection>>, TError = HTTPValidationError>(
 adapterId: string,
    params: DiscoverySettingConfigurationTestConnectionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof discoverySettingConfigurationTestConnection>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDiscoverySettingConfigurationTestConnectionQueryOptions(adapterId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Discovery Setting Run Now
 */
export const discoverySettingRunNow = (
    adapterId: string,
    params: DiscoverySettingRunNowParams,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<DiscoverySettingsRunNowResponse>(
      {url: `/api/asset-identification/discovery-settings/${adapterId}/run-now`, method: 'GET',
        params, signal
    },
      );
    }
  

const getDiscoverySettingRunNowQueryKey = (adapterId: string,
    params: DiscoverySettingRunNowParams,) => {
    return [`/api/asset-identification/discovery-settings/${adapterId}/run-now`, ...(params ? [params]: [])] as const;
    }

    
export const getDiscoverySettingRunNowQueryOptions = <TData = Awaited<ReturnType<typeof discoverySettingRunNow>>, TError = HTTPValidationError>(adapterId: string,
    params: DiscoverySettingRunNowParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof discoverySettingRunNow>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDiscoverySettingRunNowQueryKey(adapterId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof discoverySettingRunNow>>> = ({ signal }) => discoverySettingRunNow(adapterId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(adapterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof discoverySettingRunNow>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DiscoverySettingRunNowQueryResult = NonNullable<Awaited<ReturnType<typeof discoverySettingRunNow>>>
export type DiscoverySettingRunNowQueryError = HTTPValidationError


export function useDiscoverySettingRunNow<TData = Awaited<ReturnType<typeof discoverySettingRunNow>>, TError = HTTPValidationError>(
 adapterId: string,
    params: DiscoverySettingRunNowParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof discoverySettingRunNow>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof discoverySettingRunNow>>,
          TError,
          Awaited<ReturnType<typeof discoverySettingRunNow>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDiscoverySettingRunNow<TData = Awaited<ReturnType<typeof discoverySettingRunNow>>, TError = HTTPValidationError>(
 adapterId: string,
    params: DiscoverySettingRunNowParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof discoverySettingRunNow>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof discoverySettingRunNow>>,
          TError,
          Awaited<ReturnType<typeof discoverySettingRunNow>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDiscoverySettingRunNow<TData = Awaited<ReturnType<typeof discoverySettingRunNow>>, TError = HTTPValidationError>(
 adapterId: string,
    params: DiscoverySettingRunNowParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof discoverySettingRunNow>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Discovery Setting Run Now
 */

export function useDiscoverySettingRunNow<TData = Awaited<ReturnType<typeof discoverySettingRunNow>>, TError = HTTPValidationError>(
 adapterId: string,
    params: DiscoverySettingRunNowParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof discoverySettingRunNow>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDiscoverySettingRunNowQueryOptions(adapterId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Discovery Setting Last Run
 */
export const getDiscoverySettingLastRun = (
    adapterId: string,
    executionId: string,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<DiscoverySettingsRunNowResponse>(
      {url: `/api/asset-identification/discovery-settings/${adapterId}/run-now/${executionId}`, method: 'GET', signal
    },
      );
    }
  

const getGetDiscoverySettingLastRunQueryKey = (adapterId: string,
    executionId: string,) => {
    return [`/api/asset-identification/discovery-settings/${adapterId}/run-now/${executionId}`] as const;
    }

    
export const getGetDiscoverySettingLastRunQueryOptions = <TData = Awaited<ReturnType<typeof getDiscoverySettingLastRun>>, TError = HTTPValidationError>(adapterId: string,
    executionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiscoverySettingLastRun>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDiscoverySettingLastRunQueryKey(adapterId,executionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDiscoverySettingLastRun>>> = ({ signal }) => getDiscoverySettingLastRun(adapterId,executionId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(adapterId && executionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDiscoverySettingLastRun>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetDiscoverySettingLastRunQueryResult = NonNullable<Awaited<ReturnType<typeof getDiscoverySettingLastRun>>>
export type GetDiscoverySettingLastRunQueryError = HTTPValidationError


export function useGetDiscoverySettingLastRun<TData = Awaited<ReturnType<typeof getDiscoverySettingLastRun>>, TError = HTTPValidationError>(
 adapterId: string,
    executionId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiscoverySettingLastRun>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDiscoverySettingLastRun>>,
          TError,
          Awaited<ReturnType<typeof getDiscoverySettingLastRun>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDiscoverySettingLastRun<TData = Awaited<ReturnType<typeof getDiscoverySettingLastRun>>, TError = HTTPValidationError>(
 adapterId: string,
    executionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiscoverySettingLastRun>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDiscoverySettingLastRun>>,
          TError,
          Awaited<ReturnType<typeof getDiscoverySettingLastRun>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDiscoverySettingLastRun<TData = Awaited<ReturnType<typeof getDiscoverySettingLastRun>>, TError = HTTPValidationError>(
 adapterId: string,
    executionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiscoverySettingLastRun>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Discovery Setting Last Run
 */

export function useGetDiscoverySettingLastRun<TData = Awaited<ReturnType<typeof getDiscoverySettingLastRun>>, TError = HTTPValidationError>(
 adapterId: string,
    executionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDiscoverySettingLastRun>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetDiscoverySettingLastRunQueryOptions(adapterId,executionId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



