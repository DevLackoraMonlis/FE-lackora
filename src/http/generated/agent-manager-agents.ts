/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * MonoWatch BackBone
 * MonoWatch Security Asset Management
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  BodyProcessAgentJobApiAgentManagerAgentProcessJobPost,
  CheckMonoAgentUpdateRequest,
  CheckMonoAgentUpdateResponse,
  DownloadMonoAgentRequest,
  DownloadMonoAgentResponse,
  HTTPValidationError,
  ProcessAgentInventoryResponse,
  RegisterNewAgentRequest,
  RegisterNewAgentResponse,
  ReportNewActivityRequest,
  ReportNewActivityResponse
} from './models';

import { orvalMutator } from '../orval-mutator';





/**
 * @summary Check For Monoagent Update
 */
export const checkForMonoagentUpdateApiAgentManagerAgentCheckUpdatePost = (
    checkMonoAgentUpdateRequest: CheckMonoAgentUpdateRequest,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<CheckMonoAgentUpdateResponse>(
      {url: "/api/agent-manager/agent/check-update", method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: checkMonoAgentUpdateRequest, signal
    },
      );
    }
  


export const getCheckForMonoagentUpdateApiAgentManagerAgentCheckUpdatePostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof checkForMonoagentUpdateApiAgentManagerAgentCheckUpdatePost>>, TError,{data: CheckMonoAgentUpdateRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof checkForMonoagentUpdateApiAgentManagerAgentCheckUpdatePost>>, TError,{data: CheckMonoAgentUpdateRequest}, TContext> => {

const mutationKey = ['checkForMonoagentUpdateApiAgentManagerAgentCheckUpdatePost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof checkForMonoagentUpdateApiAgentManagerAgentCheckUpdatePost>>, {data: CheckMonoAgentUpdateRequest}> = (props) => {
          const {data} = props ?? {};

          return  checkForMonoagentUpdateApiAgentManagerAgentCheckUpdatePost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CheckForMonoagentUpdateApiAgentManagerAgentCheckUpdatePostMutationResult = NonNullable<Awaited<ReturnType<typeof checkForMonoagentUpdateApiAgentManagerAgentCheckUpdatePost>>>
    export type CheckForMonoagentUpdateApiAgentManagerAgentCheckUpdatePostMutationBody = CheckMonoAgentUpdateRequest
    export type CheckForMonoagentUpdateApiAgentManagerAgentCheckUpdatePostMutationError = HTTPValidationError

    /**
 * @summary Check For Monoagent Update
 */
export const useCheckForMonoagentUpdateApiAgentManagerAgentCheckUpdatePost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof checkForMonoagentUpdateApiAgentManagerAgentCheckUpdatePost>>, TError,{data: CheckMonoAgentUpdateRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof checkForMonoagentUpdateApiAgentManagerAgentCheckUpdatePost>>,
        TError,
        {data: CheckMonoAgentUpdateRequest},
        TContext
      > => {

      const mutationOptions = getCheckForMonoagentUpdateApiAgentManagerAgentCheckUpdatePostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Download Latest Monoagent
 */
export const downloadLatestMonoagentApiAgentManagerAgentDownloadMonoagentPost = (
    downloadMonoAgentRequest: DownloadMonoAgentRequest,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<DownloadMonoAgentResponse>(
      {url: "/api/agent-manager/agent/download-monoagent", method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: downloadMonoAgentRequest, signal
    },
      );
    }
  


export const getDownloadLatestMonoagentApiAgentManagerAgentDownloadMonoagentPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof downloadLatestMonoagentApiAgentManagerAgentDownloadMonoagentPost>>, TError,{data: DownloadMonoAgentRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof downloadLatestMonoagentApiAgentManagerAgentDownloadMonoagentPost>>, TError,{data: DownloadMonoAgentRequest}, TContext> => {

const mutationKey = ['downloadLatestMonoagentApiAgentManagerAgentDownloadMonoagentPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof downloadLatestMonoagentApiAgentManagerAgentDownloadMonoagentPost>>, {data: DownloadMonoAgentRequest}> = (props) => {
          const {data} = props ?? {};

          return  downloadLatestMonoagentApiAgentManagerAgentDownloadMonoagentPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DownloadLatestMonoagentApiAgentManagerAgentDownloadMonoagentPostMutationResult = NonNullable<Awaited<ReturnType<typeof downloadLatestMonoagentApiAgentManagerAgentDownloadMonoagentPost>>>
    export type DownloadLatestMonoagentApiAgentManagerAgentDownloadMonoagentPostMutationBody = DownloadMonoAgentRequest
    export type DownloadLatestMonoagentApiAgentManagerAgentDownloadMonoagentPostMutationError = HTTPValidationError

    /**
 * @summary Download Latest Monoagent
 */
export const useDownloadLatestMonoagentApiAgentManagerAgentDownloadMonoagentPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof downloadLatestMonoagentApiAgentManagerAgentDownloadMonoagentPost>>, TError,{data: DownloadMonoAgentRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof downloadLatestMonoagentApiAgentManagerAgentDownloadMonoagentPost>>,
        TError,
        {data: DownloadMonoAgentRequest},
        TContext
      > => {

      const mutationOptions = getDownloadLatestMonoagentApiAgentManagerAgentDownloadMonoagentPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Report Monoagent Activity
 */
export const reportMonoagentActivityApiAgentManagerAgentReportPost = (
    reportNewActivityRequest: ReportNewActivityRequest,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<ReportNewActivityResponse>(
      {url: "/api/agent-manager/agent/report", method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: reportNewActivityRequest, signal
    },
      );
    }
  


export const getReportMonoagentActivityApiAgentManagerAgentReportPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof reportMonoagentActivityApiAgentManagerAgentReportPost>>, TError,{data: ReportNewActivityRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof reportMonoagentActivityApiAgentManagerAgentReportPost>>, TError,{data: ReportNewActivityRequest}, TContext> => {

const mutationKey = ['reportMonoagentActivityApiAgentManagerAgentReportPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof reportMonoagentActivityApiAgentManagerAgentReportPost>>, {data: ReportNewActivityRequest}> = (props) => {
          const {data} = props ?? {};

          return  reportMonoagentActivityApiAgentManagerAgentReportPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ReportMonoagentActivityApiAgentManagerAgentReportPostMutationResult = NonNullable<Awaited<ReturnType<typeof reportMonoagentActivityApiAgentManagerAgentReportPost>>>
    export type ReportMonoagentActivityApiAgentManagerAgentReportPostMutationBody = ReportNewActivityRequest
    export type ReportMonoagentActivityApiAgentManagerAgentReportPostMutationError = HTTPValidationError

    /**
 * @summary Report Monoagent Activity
 */
export const useReportMonoagentActivityApiAgentManagerAgentReportPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof reportMonoagentActivityApiAgentManagerAgentReportPost>>, TError,{data: ReportNewActivityRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof reportMonoagentActivityApiAgentManagerAgentReportPost>>,
        TError,
        {data: ReportNewActivityRequest},
        TContext
      > => {

      const mutationOptions = getReportMonoagentActivityApiAgentManagerAgentReportPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Register New Agent
 */
export const registerNewAgentApiAgentManagerAgentRegisterPost = (
    registerNewAgentRequest: RegisterNewAgentRequest,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<RegisterNewAgentResponse>(
      {url: "/api/agent-manager/agent/register", method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: registerNewAgentRequest, signal
    },
      );
    }
  


export const getRegisterNewAgentApiAgentManagerAgentRegisterPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerNewAgentApiAgentManagerAgentRegisterPost>>, TError,{data: RegisterNewAgentRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof registerNewAgentApiAgentManagerAgentRegisterPost>>, TError,{data: RegisterNewAgentRequest}, TContext> => {

const mutationKey = ['registerNewAgentApiAgentManagerAgentRegisterPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerNewAgentApiAgentManagerAgentRegisterPost>>, {data: RegisterNewAgentRequest}> = (props) => {
          const {data} = props ?? {};

          return  registerNewAgentApiAgentManagerAgentRegisterPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterNewAgentApiAgentManagerAgentRegisterPostMutationResult = NonNullable<Awaited<ReturnType<typeof registerNewAgentApiAgentManagerAgentRegisterPost>>>
    export type RegisterNewAgentApiAgentManagerAgentRegisterPostMutationBody = RegisterNewAgentRequest
    export type RegisterNewAgentApiAgentManagerAgentRegisterPostMutationError = HTTPValidationError

    /**
 * @summary Register New Agent
 */
export const useRegisterNewAgentApiAgentManagerAgentRegisterPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerNewAgentApiAgentManagerAgentRegisterPost>>, TError,{data: RegisterNewAgentRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof registerNewAgentApiAgentManagerAgentRegisterPost>>,
        TError,
        {data: RegisterNewAgentRequest},
        TContext
      > => {

      const mutationOptions = getRegisterNewAgentApiAgentManagerAgentRegisterPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Process Agent Job
 */
export const processAgentJobApiAgentManagerAgentProcessJobPost = (
    bodyProcessAgentJobApiAgentManagerAgentProcessJobPost: BodyProcessAgentJobApiAgentManagerAgentProcessJobPost,
 signal?: AbortSignal
) => {
      
      const formData = new FormData();
formData.append("udi", bodyProcessAgentJobApiAgentManagerAgentProcessJobPost.udi)
formData.append("sha1", bodyProcessAgentJobApiAgentManagerAgentProcessJobPost.sha1)
formData.append("job_type", bodyProcessAgentJobApiAgentManagerAgentProcessJobPost.job_type)
if(bodyProcessAgentJobApiAgentManagerAgentProcessJobPost.result !== undefined && bodyProcessAgentJobApiAgentManagerAgentProcessJobPost.result !== null) {
 formData.append("result", bodyProcessAgentJobApiAgentManagerAgentProcessJobPost.result)
 }
if(bodyProcessAgentJobApiAgentManagerAgentProcessJobPost.file !== undefined && bodyProcessAgentJobApiAgentManagerAgentProcessJobPost.file !== null) {
 formData.append("file", bodyProcessAgentJobApiAgentManagerAgentProcessJobPost.file)
 }

      return orvalMutator<ProcessAgentInventoryResponse>(
      {url: "/api/agent-manager/agent/process-job", method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      );
    }
  


export const getProcessAgentJobApiAgentManagerAgentProcessJobPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof processAgentJobApiAgentManagerAgentProcessJobPost>>, TError,{data: BodyProcessAgentJobApiAgentManagerAgentProcessJobPost}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof processAgentJobApiAgentManagerAgentProcessJobPost>>, TError,{data: BodyProcessAgentJobApiAgentManagerAgentProcessJobPost}, TContext> => {

const mutationKey = ['processAgentJobApiAgentManagerAgentProcessJobPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof processAgentJobApiAgentManagerAgentProcessJobPost>>, {data: BodyProcessAgentJobApiAgentManagerAgentProcessJobPost}> = (props) => {
          const {data} = props ?? {};

          return  processAgentJobApiAgentManagerAgentProcessJobPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProcessAgentJobApiAgentManagerAgentProcessJobPostMutationResult = NonNullable<Awaited<ReturnType<typeof processAgentJobApiAgentManagerAgentProcessJobPost>>>
    export type ProcessAgentJobApiAgentManagerAgentProcessJobPostMutationBody = BodyProcessAgentJobApiAgentManagerAgentProcessJobPost
    export type ProcessAgentJobApiAgentManagerAgentProcessJobPostMutationError = HTTPValidationError

    /**
 * @summary Process Agent Job
 */
export const useProcessAgentJobApiAgentManagerAgentProcessJobPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof processAgentJobApiAgentManagerAgentProcessJobPost>>, TError,{data: BodyProcessAgentJobApiAgentManagerAgentProcessJobPost}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof processAgentJobApiAgentManagerAgentProcessJobPost>>,
        TError,
        {data: BodyProcessAgentJobApiAgentManagerAgentProcessJobPost},
        TContext
      > => {

      const mutationOptions = getProcessAgentJobApiAgentManagerAgentProcessJobPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    