/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * MonoWatch BackBone
 * MonoWatch Security Asset Management
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  BodyProcessAgentJobApiAgentManagerAgentResultCallbackPost,
  CheckMonoAgentUpdateRequest,
  CheckMonoAgentUpdateResponse,
  GetLatestAgentHashResponse,
  GetLatestMonoagentHashApiAgentManagerAgentLatestAgentsGetParams,
  HTTPValidationError,
  ProcessAgentInventoryResponse,
  RegisterNewAgentRequest,
  RegisterNewAgentResponse,
  ReportNewActivityRequest,
  ReportNewActivityResponse
} from './models';

import { orvalMutator } from '../orval-mutator';





/**
 * @summary Check For Monoagent Update
 */
export const checkForMonoagentUpdateApiAgentManagerAgentUpdateRequiredPost = (
    checkMonoAgentUpdateRequest: CheckMonoAgentUpdateRequest,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<CheckMonoAgentUpdateResponse>(
      {url: "/api/agent-manager/agent/update-required", method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: checkMonoAgentUpdateRequest, signal
    },
      );
    }
  


export const getCheckForMonoagentUpdateApiAgentManagerAgentUpdateRequiredPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof checkForMonoagentUpdateApiAgentManagerAgentUpdateRequiredPost>>, TError,{data: CheckMonoAgentUpdateRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof checkForMonoagentUpdateApiAgentManagerAgentUpdateRequiredPost>>, TError,{data: CheckMonoAgentUpdateRequest}, TContext> => {

const mutationKey = ['checkForMonoagentUpdateApiAgentManagerAgentUpdateRequiredPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof checkForMonoagentUpdateApiAgentManagerAgentUpdateRequiredPost>>, {data: CheckMonoAgentUpdateRequest}> = (props) => {
          const {data} = props ?? {};

          return  checkForMonoagentUpdateApiAgentManagerAgentUpdateRequiredPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CheckForMonoagentUpdateApiAgentManagerAgentUpdateRequiredPostMutationResult = NonNullable<Awaited<ReturnType<typeof checkForMonoagentUpdateApiAgentManagerAgentUpdateRequiredPost>>>
    export type CheckForMonoagentUpdateApiAgentManagerAgentUpdateRequiredPostMutationBody = CheckMonoAgentUpdateRequest
    export type CheckForMonoagentUpdateApiAgentManagerAgentUpdateRequiredPostMutationError = HTTPValidationError

    /**
 * @summary Check For Monoagent Update
 */
export const useCheckForMonoagentUpdateApiAgentManagerAgentUpdateRequiredPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof checkForMonoagentUpdateApiAgentManagerAgentUpdateRequiredPost>>, TError,{data: CheckMonoAgentUpdateRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof checkForMonoagentUpdateApiAgentManagerAgentUpdateRequiredPost>>,
        TError,
        {data: CheckMonoAgentUpdateRequest},
        TContext
      > => {

      const mutationOptions = getCheckForMonoagentUpdateApiAgentManagerAgentUpdateRequiredPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get Latest Monoagent Hash
 */
export const getLatestMonoagentHashApiAgentManagerAgentLatestAgentsGet = (
    params: GetLatestMonoagentHashApiAgentManagerAgentLatestAgentsGetParams,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<GetLatestAgentHashResponse>(
      {url: "/api/agent-manager/agent/latest-agents", method: 'GET',
        params, signal
    },
      );
    }
  

const getGetLatestMonoagentHashApiAgentManagerAgentLatestAgentsGetQueryKey = (params: GetLatestMonoagentHashApiAgentManagerAgentLatestAgentsGetParams,) => {
    return ["/api/agent-manager/agent/latest-agents", ...(params ? [params]: [])] as const;
    }

    
export const getGetLatestMonoagentHashApiAgentManagerAgentLatestAgentsGetQueryOptions = <TData = Awaited<ReturnType<typeof getLatestMonoagentHashApiAgentManagerAgentLatestAgentsGet>>, TError = HTTPValidationError>(params: GetLatestMonoagentHashApiAgentManagerAgentLatestAgentsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLatestMonoagentHashApiAgentManagerAgentLatestAgentsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLatestMonoagentHashApiAgentManagerAgentLatestAgentsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLatestMonoagentHashApiAgentManagerAgentLatestAgentsGet>>> = ({ signal }) => getLatestMonoagentHashApiAgentManagerAgentLatestAgentsGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLatestMonoagentHashApiAgentManagerAgentLatestAgentsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetLatestMonoagentHashApiAgentManagerAgentLatestAgentsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getLatestMonoagentHashApiAgentManagerAgentLatestAgentsGet>>>
export type GetLatestMonoagentHashApiAgentManagerAgentLatestAgentsGetQueryError = HTTPValidationError


export function useGetLatestMonoagentHashApiAgentManagerAgentLatestAgentsGet<TData = Awaited<ReturnType<typeof getLatestMonoagentHashApiAgentManagerAgentLatestAgentsGet>>, TError = HTTPValidationError>(
 params: GetLatestMonoagentHashApiAgentManagerAgentLatestAgentsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLatestMonoagentHashApiAgentManagerAgentLatestAgentsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLatestMonoagentHashApiAgentManagerAgentLatestAgentsGet>>,
          TError,
          Awaited<ReturnType<typeof getLatestMonoagentHashApiAgentManagerAgentLatestAgentsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetLatestMonoagentHashApiAgentManagerAgentLatestAgentsGet<TData = Awaited<ReturnType<typeof getLatestMonoagentHashApiAgentManagerAgentLatestAgentsGet>>, TError = HTTPValidationError>(
 params: GetLatestMonoagentHashApiAgentManagerAgentLatestAgentsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLatestMonoagentHashApiAgentManagerAgentLatestAgentsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLatestMonoagentHashApiAgentManagerAgentLatestAgentsGet>>,
          TError,
          Awaited<ReturnType<typeof getLatestMonoagentHashApiAgentManagerAgentLatestAgentsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetLatestMonoagentHashApiAgentManagerAgentLatestAgentsGet<TData = Awaited<ReturnType<typeof getLatestMonoagentHashApiAgentManagerAgentLatestAgentsGet>>, TError = HTTPValidationError>(
 params: GetLatestMonoagentHashApiAgentManagerAgentLatestAgentsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLatestMonoagentHashApiAgentManagerAgentLatestAgentsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Latest Monoagent Hash
 */

export function useGetLatestMonoagentHashApiAgentManagerAgentLatestAgentsGet<TData = Awaited<ReturnType<typeof getLatestMonoagentHashApiAgentManagerAgentLatestAgentsGet>>, TError = HTTPValidationError>(
 params: GetLatestMonoagentHashApiAgentManagerAgentLatestAgentsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLatestMonoagentHashApiAgentManagerAgentLatestAgentsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetLatestMonoagentHashApiAgentManagerAgentLatestAgentsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Register New Agent
 */
export const registerNewAgentApiAgentManagerAgentRegisterPost = (
    registerNewAgentRequest: RegisterNewAgentRequest,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<RegisterNewAgentResponse>(
      {url: "/api/agent-manager/agent/register", method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: registerNewAgentRequest, signal
    },
      );
    }
  


export const getRegisterNewAgentApiAgentManagerAgentRegisterPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerNewAgentApiAgentManagerAgentRegisterPost>>, TError,{data: RegisterNewAgentRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof registerNewAgentApiAgentManagerAgentRegisterPost>>, TError,{data: RegisterNewAgentRequest}, TContext> => {

const mutationKey = ['registerNewAgentApiAgentManagerAgentRegisterPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerNewAgentApiAgentManagerAgentRegisterPost>>, {data: RegisterNewAgentRequest}> = (props) => {
          const {data} = props ?? {};

          return  registerNewAgentApiAgentManagerAgentRegisterPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterNewAgentApiAgentManagerAgentRegisterPostMutationResult = NonNullable<Awaited<ReturnType<typeof registerNewAgentApiAgentManagerAgentRegisterPost>>>
    export type RegisterNewAgentApiAgentManagerAgentRegisterPostMutationBody = RegisterNewAgentRequest
    export type RegisterNewAgentApiAgentManagerAgentRegisterPostMutationError = HTTPValidationError

    /**
 * @summary Register New Agent
 */
export const useRegisterNewAgentApiAgentManagerAgentRegisterPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerNewAgentApiAgentManagerAgentRegisterPost>>, TError,{data: RegisterNewAgentRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof registerNewAgentApiAgentManagerAgentRegisterPost>>,
        TError,
        {data: RegisterNewAgentRequest},
        TContext
      > => {

      const mutationOptions = getRegisterNewAgentApiAgentManagerAgentRegisterPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Report Monoagent Activity
 */
export const reportMonoagentActivityApiAgentManagerAgentActivityCallbackPost = (
    reportNewActivityRequest: ReportNewActivityRequest,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<ReportNewActivityResponse>(
      {url: "/api/agent-manager/agent/activity-callback", method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: reportNewActivityRequest, signal
    },
      );
    }
  


export const getReportMonoagentActivityApiAgentManagerAgentActivityCallbackPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof reportMonoagentActivityApiAgentManagerAgentActivityCallbackPost>>, TError,{data: ReportNewActivityRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof reportMonoagentActivityApiAgentManagerAgentActivityCallbackPost>>, TError,{data: ReportNewActivityRequest}, TContext> => {

const mutationKey = ['reportMonoagentActivityApiAgentManagerAgentActivityCallbackPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof reportMonoagentActivityApiAgentManagerAgentActivityCallbackPost>>, {data: ReportNewActivityRequest}> = (props) => {
          const {data} = props ?? {};

          return  reportMonoagentActivityApiAgentManagerAgentActivityCallbackPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ReportMonoagentActivityApiAgentManagerAgentActivityCallbackPostMutationResult = NonNullable<Awaited<ReturnType<typeof reportMonoagentActivityApiAgentManagerAgentActivityCallbackPost>>>
    export type ReportMonoagentActivityApiAgentManagerAgentActivityCallbackPostMutationBody = ReportNewActivityRequest
    export type ReportMonoagentActivityApiAgentManagerAgentActivityCallbackPostMutationError = HTTPValidationError

    /**
 * @summary Report Monoagent Activity
 */
export const useReportMonoagentActivityApiAgentManagerAgentActivityCallbackPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof reportMonoagentActivityApiAgentManagerAgentActivityCallbackPost>>, TError,{data: ReportNewActivityRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof reportMonoagentActivityApiAgentManagerAgentActivityCallbackPost>>,
        TError,
        {data: ReportNewActivityRequest},
        TContext
      > => {

      const mutationOptions = getReportMonoagentActivityApiAgentManagerAgentActivityCallbackPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Process Agent Job
 */
export const processAgentJobApiAgentManagerAgentResultCallbackPost = (
    bodyProcessAgentJobApiAgentManagerAgentResultCallbackPost: BodyProcessAgentJobApiAgentManagerAgentResultCallbackPost,
 signal?: AbortSignal
) => {
      
      const formData = new FormData();
formData.append("udi", bodyProcessAgentJobApiAgentManagerAgentResultCallbackPost.udi)
formData.append("hash", bodyProcessAgentJobApiAgentManagerAgentResultCallbackPost.hash)
formData.append("job_type", bodyProcessAgentJobApiAgentManagerAgentResultCallbackPost.job_type)
if(bodyProcessAgentJobApiAgentManagerAgentResultCallbackPost.result !== undefined && bodyProcessAgentJobApiAgentManagerAgentResultCallbackPost.result !== null) {
 formData.append("result", bodyProcessAgentJobApiAgentManagerAgentResultCallbackPost.result)
 }
if(bodyProcessAgentJobApiAgentManagerAgentResultCallbackPost.file !== undefined && bodyProcessAgentJobApiAgentManagerAgentResultCallbackPost.file !== null) {
 formData.append("file", bodyProcessAgentJobApiAgentManagerAgentResultCallbackPost.file)
 }

      return orvalMutator<ProcessAgentInventoryResponse>(
      {url: "/api/agent-manager/agent/result-callback", method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      );
    }
  


export const getProcessAgentJobApiAgentManagerAgentResultCallbackPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof processAgentJobApiAgentManagerAgentResultCallbackPost>>, TError,{data: BodyProcessAgentJobApiAgentManagerAgentResultCallbackPost}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof processAgentJobApiAgentManagerAgentResultCallbackPost>>, TError,{data: BodyProcessAgentJobApiAgentManagerAgentResultCallbackPost}, TContext> => {

const mutationKey = ['processAgentJobApiAgentManagerAgentResultCallbackPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof processAgentJobApiAgentManagerAgentResultCallbackPost>>, {data: BodyProcessAgentJobApiAgentManagerAgentResultCallbackPost}> = (props) => {
          const {data} = props ?? {};

          return  processAgentJobApiAgentManagerAgentResultCallbackPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProcessAgentJobApiAgentManagerAgentResultCallbackPostMutationResult = NonNullable<Awaited<ReturnType<typeof processAgentJobApiAgentManagerAgentResultCallbackPost>>>
    export type ProcessAgentJobApiAgentManagerAgentResultCallbackPostMutationBody = BodyProcessAgentJobApiAgentManagerAgentResultCallbackPost
    export type ProcessAgentJobApiAgentManagerAgentResultCallbackPostMutationError = HTTPValidationError

    /**
 * @summary Process Agent Job
 */
export const useProcessAgentJobApiAgentManagerAgentResultCallbackPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof processAgentJobApiAgentManagerAgentResultCallbackPost>>, TError,{data: BodyProcessAgentJobApiAgentManagerAgentResultCallbackPost}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof processAgentJobApiAgentManagerAgentResultCallbackPost>>,
        TError,
        {data: BodyProcessAgentJobApiAgentManagerAgentResultCallbackPost},
        TContext
      > => {

      const mutationOptions = getProcessAgentJobApiAgentManagerAgentResultCallbackPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    