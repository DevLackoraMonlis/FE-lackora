/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * MonoWatch BackBone
 * MonoWatch Security Asset Management
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  PaginatedBaseResponseEachLicenseResponseEachLicenseMetadataWrapper
} from './models';

import { orvalMutator } from '../orval-mutator';





/**
 * @summary List All Licenses
 */
export const getLicenses = (
    
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<PaginatedBaseResponseEachLicenseResponseEachLicenseMetadataWrapper>(
      {url: `/api/license-management/`, method: 'GET', signal
    },
      );
    }
  

const getGetLicensesQueryKey = () => {
    return [`/api/license-management/`] as const;
    }

    
export const getGetLicensesQueryOptions = <TData = Awaited<ReturnType<typeof getLicenses>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenses>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLicensesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLicenses>>> = ({ signal }) => getLicenses(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLicenses>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetLicensesQueryResult = NonNullable<Awaited<ReturnType<typeof getLicenses>>>
export type GetLicensesQueryError = unknown


export function useGetLicenses<TData = Awaited<ReturnType<typeof getLicenses>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenses>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenses>>,
          TError,
          Awaited<ReturnType<typeof getLicenses>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetLicenses<TData = Awaited<ReturnType<typeof getLicenses>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenses>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLicenses>>,
          TError,
          Awaited<ReturnType<typeof getLicenses>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetLicenses<TData = Awaited<ReturnType<typeof getLicenses>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenses>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List All Licenses
 */

export function useGetLicenses<TData = Awaited<ReturnType<typeof getLicenses>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLicenses>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetLicensesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



