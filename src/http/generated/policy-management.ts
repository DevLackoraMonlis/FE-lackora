/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * MonoWatch BackBone
 * MonoWatch Security Asset Management
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetPoliciesParams,
  HTTPValidationError,
  PaginatedBaseResponseEachPolicyManagementPolicyNoneType,
  PolicyManagementActionsResponse
} from './models';

import { orvalMutator } from '../orval-mutator';





/**
 * @summary Get Policy Management Available Actions
 */
export const getPolicyManagementActions = (
    
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<PolicyManagementActionsResponse>(
      {url: "/api/policy-management/actions", method: 'GET', signal
    },
      );
    }
  

const getGetPolicyManagementActionsQueryKey = () => {
    return ["/api/policy-management/actions"] as const;
    }

    
export const getGetPolicyManagementActionsQueryOptions = <TData = Awaited<ReturnType<typeof getPolicyManagementActions>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicyManagementActions>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPolicyManagementActionsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPolicyManagementActions>>> = ({ signal }) => getPolicyManagementActions(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPolicyManagementActions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPolicyManagementActionsQueryResult = NonNullable<Awaited<ReturnType<typeof getPolicyManagementActions>>>
export type GetPolicyManagementActionsQueryError = unknown


export function useGetPolicyManagementActions<TData = Awaited<ReturnType<typeof getPolicyManagementActions>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicyManagementActions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPolicyManagementActions>>,
          TError,
          Awaited<ReturnType<typeof getPolicyManagementActions>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPolicyManagementActions<TData = Awaited<ReturnType<typeof getPolicyManagementActions>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicyManagementActions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPolicyManagementActions>>,
          TError,
          Awaited<ReturnType<typeof getPolicyManagementActions>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPolicyManagementActions<TData = Awaited<ReturnType<typeof getPolicyManagementActions>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicyManagementActions>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Policy Management Available Actions
 */

export function useGetPolicyManagementActions<TData = Awaited<ReturnType<typeof getPolicyManagementActions>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicyManagementActions>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPolicyManagementActionsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary List All Available Policies
 */
export const getPolicies = (
    params: GetPoliciesParams,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<PaginatedBaseResponseEachPolicyManagementPolicyNoneType>(
      {url: "/api/policy-management/policies", method: 'GET',
        params, signal
    },
      );
    }
  

const getGetPoliciesQueryKey = (params: GetPoliciesParams,) => {
    return ["/api/policy-management/policies", ...(params ? [params]: [])] as const;
    }

    
export const getGetPoliciesQueryOptions = <TData = Awaited<ReturnType<typeof getPolicies>>, TError = HTTPValidationError>(params: GetPoliciesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicies>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPoliciesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPolicies>>> = ({ signal }) => getPolicies(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPolicies>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPoliciesQueryResult = NonNullable<Awaited<ReturnType<typeof getPolicies>>>
export type GetPoliciesQueryError = HTTPValidationError


export function useGetPolicies<TData = Awaited<ReturnType<typeof getPolicies>>, TError = HTTPValidationError>(
 params: GetPoliciesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicies>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPolicies>>,
          TError,
          Awaited<ReturnType<typeof getPolicies>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPolicies<TData = Awaited<ReturnType<typeof getPolicies>>, TError = HTTPValidationError>(
 params: GetPoliciesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicies>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPolicies>>,
          TError,
          Awaited<ReturnType<typeof getPolicies>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPolicies<TData = Awaited<ReturnType<typeof getPolicies>>, TError = HTTPValidationError>(
 params: GetPoliciesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicies>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List All Available Policies
 */

export function useGetPolicies<TData = Awaited<ReturnType<typeof getPolicies>>, TError = HTTPValidationError>(
 params: GetPoliciesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicies>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPoliciesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



