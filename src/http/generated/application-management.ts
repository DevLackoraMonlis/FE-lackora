/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * MonoWatch BackBone
 * MonoWatch Security Asset Management
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ActiveApplicationsResponse,
  EachApplicationsResponse,
  GetApplicationsParams,
  HTTPValidationError,
  MessageOnlyResponse,
  PaginatedBaseResponseEachApplicationsInListResponseEachListMetadataWrapper
} from './models';

import { orvalMutator } from '../orval-mutator';





/**
 * @summary List All Applications
 */
export const getApplications = (
    params?: GetApplicationsParams,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<PaginatedBaseResponseEachApplicationsInListResponseEachListMetadataWrapper>(
      {url: `/api/application-management/`, method: 'GET',
        params, signal
    },
      );
    }
  

const getGetApplicationsQueryKey = (params?: GetApplicationsParams,) => {
    return [`/api/application-management/`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApplicationsQueryOptions = <TData = Awaited<ReturnType<typeof getApplications>>, TError = HTTPValidationError>(params?: GetApplicationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplications>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApplicationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApplications>>> = ({ signal }) => getApplications(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApplications>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApplicationsQueryResult = NonNullable<Awaited<ReturnType<typeof getApplications>>>
export type GetApplicationsQueryError = HTTPValidationError


export function useGetApplications<TData = Awaited<ReturnType<typeof getApplications>>, TError = HTTPValidationError>(
 params: undefined |  GetApplicationsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplications>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApplications>>,
          TError,
          Awaited<ReturnType<typeof getApplications>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApplications<TData = Awaited<ReturnType<typeof getApplications>>, TError = HTTPValidationError>(
 params?: GetApplicationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplications>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApplications>>,
          TError,
          Awaited<ReturnType<typeof getApplications>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApplications<TData = Awaited<ReturnType<typeof getApplications>>, TError = HTTPValidationError>(
 params?: GetApplicationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplications>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List All Applications
 */

export function useGetApplications<TData = Awaited<ReturnType<typeof getApplications>>, TError = HTTPValidationError>(
 params?: GetApplicationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplications>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApplicationsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get All Current Active Applications
 */
export const getActiveApplications = (
    
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<ActiveApplicationsResponse>(
      {url: `/api/application-management/active-applications`, method: 'GET', signal
    },
      );
    }
  

const getGetActiveApplicationsQueryKey = () => {
    return [`/api/application-management/active-applications`] as const;
    }

    
export const getGetActiveApplicationsQueryOptions = <TData = Awaited<ReturnType<typeof getActiveApplications>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getActiveApplications>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetActiveApplicationsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getActiveApplications>>> = ({ signal }) => getActiveApplications(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getActiveApplications>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetActiveApplicationsQueryResult = NonNullable<Awaited<ReturnType<typeof getActiveApplications>>>
export type GetActiveApplicationsQueryError = unknown


export function useGetActiveApplications<TData = Awaited<ReturnType<typeof getActiveApplications>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getActiveApplications>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getActiveApplications>>,
          TError,
          Awaited<ReturnType<typeof getActiveApplications>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetActiveApplications<TData = Awaited<ReturnType<typeof getActiveApplications>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getActiveApplications>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getActiveApplications>>,
          TError,
          Awaited<ReturnType<typeof getActiveApplications>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetActiveApplications<TData = Awaited<ReturnType<typeof getActiveApplications>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getActiveApplications>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get All Current Active Applications
 */

export function useGetActiveApplications<TData = Awaited<ReturnType<typeof getActiveApplications>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getActiveApplications>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetActiveApplicationsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Single Application Details
 */
export const getApplication = (
    applicationId: string,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<EachApplicationsResponse>(
      {url: `/api/application-management/${applicationId}`, method: 'GET', signal
    },
      );
    }
  

const getGetApplicationQueryKey = (applicationId: string,) => {
    return [`/api/application-management/${applicationId}`] as const;
    }

    
export const getGetApplicationQueryOptions = <TData = Awaited<ReturnType<typeof getApplication>>, TError = HTTPValidationError>(applicationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplication>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApplicationQueryKey(applicationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApplication>>> = ({ signal }) => getApplication(applicationId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(applicationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApplication>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApplicationQueryResult = NonNullable<Awaited<ReturnType<typeof getApplication>>>
export type GetApplicationQueryError = HTTPValidationError


export function useGetApplication<TData = Awaited<ReturnType<typeof getApplication>>, TError = HTTPValidationError>(
 applicationId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplication>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApplication>>,
          TError,
          Awaited<ReturnType<typeof getApplication>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApplication<TData = Awaited<ReturnType<typeof getApplication>>, TError = HTTPValidationError>(
 applicationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplication>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApplication>>,
          TError,
          Awaited<ReturnType<typeof getApplication>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApplication<TData = Awaited<ReturnType<typeof getApplication>>, TError = HTTPValidationError>(
 applicationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplication>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Single Application Details
 */

export function useGetApplication<TData = Awaited<ReturnType<typeof getApplication>>, TError = HTTPValidationError>(
 applicationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplication>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApplicationQueryOptions(applicationId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Activate Available Monoapp
 */
export const activateMonoApplication = (
    applicationId: string,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<MessageOnlyResponse>(
      {url: `/api/application-management/${applicationId}/activate`, method: 'GET', signal
    },
      );
    }
  

const getActivateMonoApplicationQueryKey = (applicationId: string,) => {
    return [`/api/application-management/${applicationId}/activate`] as const;
    }

    
export const getActivateMonoApplicationQueryOptions = <TData = Awaited<ReturnType<typeof activateMonoApplication>>, TError = HTTPValidationError>(applicationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof activateMonoApplication>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getActivateMonoApplicationQueryKey(applicationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof activateMonoApplication>>> = ({ signal }) => activateMonoApplication(applicationId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(applicationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof activateMonoApplication>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ActivateMonoApplicationQueryResult = NonNullable<Awaited<ReturnType<typeof activateMonoApplication>>>
export type ActivateMonoApplicationQueryError = HTTPValidationError


export function useActivateMonoApplication<TData = Awaited<ReturnType<typeof activateMonoApplication>>, TError = HTTPValidationError>(
 applicationId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof activateMonoApplication>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof activateMonoApplication>>,
          TError,
          Awaited<ReturnType<typeof activateMonoApplication>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useActivateMonoApplication<TData = Awaited<ReturnType<typeof activateMonoApplication>>, TError = HTTPValidationError>(
 applicationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof activateMonoApplication>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof activateMonoApplication>>,
          TError,
          Awaited<ReturnType<typeof activateMonoApplication>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useActivateMonoApplication<TData = Awaited<ReturnType<typeof activateMonoApplication>>, TError = HTTPValidationError>(
 applicationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof activateMonoApplication>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Activate Available Monoapp
 */

export function useActivateMonoApplication<TData = Awaited<ReturnType<typeof activateMonoApplication>>, TError = HTTPValidationError>(
 applicationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof activateMonoApplication>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getActivateMonoApplicationQueryOptions(applicationId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



