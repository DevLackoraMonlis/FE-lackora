/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * MonoWatch BackBone
 * MonoWatch Security Asset Management
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CyberAssetHistoryDataAdvanceFilterRequestModel,
  CyberAssetHistoryDataAdvancedFilterResponse,
  CyberAssetHistoryFilterColumnsResponse,
  HTTPValidationError
} from './models';

import { orvalMutator } from '../orval-mutator';





/**
 * @summary Get Cyber Asset History Filter Columns
 */
export const getCyberAssetHistoryFilterColumns = (
    
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<CyberAssetHistoryFilterColumnsResponse>(
      {url: `/api/asset-management/history/columns`, method: 'GET', signal
    },
      );
    }
  

const getGetCyberAssetHistoryFilterColumnsQueryKey = () => {
    return [`/api/asset-management/history/columns`] as const;
    }

    
export const getGetCyberAssetHistoryFilterColumnsQueryOptions = <TData = Awaited<ReturnType<typeof getCyberAssetHistoryFilterColumns>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCyberAssetHistoryFilterColumns>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCyberAssetHistoryFilterColumnsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCyberAssetHistoryFilterColumns>>> = ({ signal }) => getCyberAssetHistoryFilterColumns(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCyberAssetHistoryFilterColumns>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCyberAssetHistoryFilterColumnsQueryResult = NonNullable<Awaited<ReturnType<typeof getCyberAssetHistoryFilterColumns>>>
export type GetCyberAssetHistoryFilterColumnsQueryError = unknown


export function useGetCyberAssetHistoryFilterColumns<TData = Awaited<ReturnType<typeof getCyberAssetHistoryFilterColumns>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCyberAssetHistoryFilterColumns>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCyberAssetHistoryFilterColumns>>,
          TError,
          Awaited<ReturnType<typeof getCyberAssetHistoryFilterColumns>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCyberAssetHistoryFilterColumns<TData = Awaited<ReturnType<typeof getCyberAssetHistoryFilterColumns>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCyberAssetHistoryFilterColumns>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCyberAssetHistoryFilterColumns>>,
          TError,
          Awaited<ReturnType<typeof getCyberAssetHistoryFilterColumns>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCyberAssetHistoryFilterColumns<TData = Awaited<ReturnType<typeof getCyberAssetHistoryFilterColumns>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCyberAssetHistoryFilterColumns>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Cyber Asset History Filter Columns
 */

export function useGetCyberAssetHistoryFilterColumns<TData = Awaited<ReturnType<typeof getCyberAssetHistoryFilterColumns>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCyberAssetHistoryFilterColumns>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCyberAssetHistoryFilterColumnsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Cyber Asset History Related Data
 */
export const getAssetActivityHistory = (
    cyberAssetHistoryDataAdvanceFilterRequestModel: CyberAssetHistoryDataAdvanceFilterRequestModel,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<CyberAssetHistoryDataAdvancedFilterResponse>(
      {url: `/api/asset-management/history/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: cyberAssetHistoryDataAdvanceFilterRequestModel, signal
    },
      );
    }
  


export const getGetAssetActivityHistoryMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getAssetActivityHistory>>, TError,{data: CyberAssetHistoryDataAdvanceFilterRequestModel}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof getAssetActivityHistory>>, TError,{data: CyberAssetHistoryDataAdvanceFilterRequestModel}, TContext> => {

const mutationKey = ['getAssetActivityHistory'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getAssetActivityHistory>>, {data: CyberAssetHistoryDataAdvanceFilterRequestModel}> = (props) => {
          const {data} = props ?? {};

          return  getAssetActivityHistory(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GetAssetActivityHistoryMutationResult = NonNullable<Awaited<ReturnType<typeof getAssetActivityHistory>>>
    export type GetAssetActivityHistoryMutationBody = CyberAssetHistoryDataAdvanceFilterRequestModel
    export type GetAssetActivityHistoryMutationError = HTTPValidationError

    /**
 * @summary Get Cyber Asset History Related Data
 */
export const useGetAssetActivityHistory = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getAssetActivityHistory>>, TError,{data: CyberAssetHistoryDataAdvanceFilterRequestModel}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof getAssetActivityHistory>>,
        TError,
        {data: CyberAssetHistoryDataAdvanceFilterRequestModel},
        TContext
      > => {

      const mutationOptions = getGetAssetActivityHistoryMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    