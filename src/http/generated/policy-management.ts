/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * MonoWatch BackBone
 * MonoWatch Security Asset Management
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AssetManagementAdvancedFilterResponse,
  CreatePolicyRequest,
  EachPolicyManagementPolicy,
  EditPolicyRequest,
  GetPoliciesParams,
  HTTPValidationError,
  MessageOnlyResponse,
  PaginatedBaseResponseEachPolicyManagementPolicyNoneType,
  PolicyConditionValidationRequest,
  PolicyDependencyCheckResponse,
  PolicyManagementActionsResponse,
  PolicyManagementFilterColumnsResponse,
  ReOrderPoliciesRequest,
  ReOrderPoliciesResponse
} from './models';

import { orvalMutator } from '../orval-mutator';





/**
 * @summary Create New Policy
 */
export const createPolicy = (
    createPolicyRequest: CreatePolicyRequest,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<EachPolicyManagementPolicy>(
      {url: "/api/policy-management/", method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createPolicyRequest, signal
    },
      );
    }
  


export const getCreatePolicyMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPolicy>>, TError,{data: CreatePolicyRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createPolicy>>, TError,{data: CreatePolicyRequest}, TContext> => {

const mutationKey = ['createPolicy'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createPolicy>>, {data: CreatePolicyRequest}> = (props) => {
          const {data} = props ?? {};

          return  createPolicy(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreatePolicyMutationResult = NonNullable<Awaited<ReturnType<typeof createPolicy>>>
    export type CreatePolicyMutationBody = CreatePolicyRequest
    export type CreatePolicyMutationError = HTTPValidationError

    /**
 * @summary Create New Policy
 */
export const useCreatePolicy = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPolicy>>, TError,{data: CreatePolicyRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createPolicy>>,
        TError,
        {data: CreatePolicyRequest},
        TContext
      > => {

      const mutationOptions = getCreatePolicyMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get Policy Management Filter Columns
 */
export const getPolicyManagementColumns = (
    
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<PolicyManagementFilterColumnsResponse>(
      {url: "/api/policy-management/columns", method: 'GET', signal
    },
      );
    }
  

const getGetPolicyManagementColumnsQueryKey = () => {
    return ["/api/policy-management/columns"] as const;
    }

    
export const getGetPolicyManagementColumnsQueryOptions = <TData = Awaited<ReturnType<typeof getPolicyManagementColumns>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicyManagementColumns>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPolicyManagementColumnsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPolicyManagementColumns>>> = ({ signal }) => getPolicyManagementColumns(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPolicyManagementColumns>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPolicyManagementColumnsQueryResult = NonNullable<Awaited<ReturnType<typeof getPolicyManagementColumns>>>
export type GetPolicyManagementColumnsQueryError = unknown


export function useGetPolicyManagementColumns<TData = Awaited<ReturnType<typeof getPolicyManagementColumns>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicyManagementColumns>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPolicyManagementColumns>>,
          TError,
          Awaited<ReturnType<typeof getPolicyManagementColumns>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPolicyManagementColumns<TData = Awaited<ReturnType<typeof getPolicyManagementColumns>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicyManagementColumns>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPolicyManagementColumns>>,
          TError,
          Awaited<ReturnType<typeof getPolicyManagementColumns>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPolicyManagementColumns<TData = Awaited<ReturnType<typeof getPolicyManagementColumns>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicyManagementColumns>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Policy Management Filter Columns
 */

export function useGetPolicyManagementColumns<TData = Awaited<ReturnType<typeof getPolicyManagementColumns>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicyManagementColumns>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPolicyManagementColumnsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Policy Management Available Actions
 */
export const getPolicyManagementActions = (
    
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<PolicyManagementActionsResponse>(
      {url: "/api/policy-management/actions", method: 'GET', signal
    },
      );
    }
  

const getGetPolicyManagementActionsQueryKey = () => {
    return ["/api/policy-management/actions"] as const;
    }

    
export const getGetPolicyManagementActionsQueryOptions = <TData = Awaited<ReturnType<typeof getPolicyManagementActions>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicyManagementActions>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPolicyManagementActionsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPolicyManagementActions>>> = ({ signal }) => getPolicyManagementActions(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPolicyManagementActions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPolicyManagementActionsQueryResult = NonNullable<Awaited<ReturnType<typeof getPolicyManagementActions>>>
export type GetPolicyManagementActionsQueryError = unknown


export function useGetPolicyManagementActions<TData = Awaited<ReturnType<typeof getPolicyManagementActions>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicyManagementActions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPolicyManagementActions>>,
          TError,
          Awaited<ReturnType<typeof getPolicyManagementActions>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPolicyManagementActions<TData = Awaited<ReturnType<typeof getPolicyManagementActions>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicyManagementActions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPolicyManagementActions>>,
          TError,
          Awaited<ReturnType<typeof getPolicyManagementActions>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPolicyManagementActions<TData = Awaited<ReturnType<typeof getPolicyManagementActions>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicyManagementActions>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Policy Management Available Actions
 */

export function useGetPolicyManagementActions<TData = Awaited<ReturnType<typeof getPolicyManagementActions>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicyManagementActions>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPolicyManagementActionsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary List All Available Policies
 */
export const getPolicies = (
    params: GetPoliciesParams,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<PaginatedBaseResponseEachPolicyManagementPolicyNoneType>(
      {url: "/api/policy-management/policies", method: 'GET',
        params, signal
    },
      );
    }
  

const getGetPoliciesQueryKey = (params: GetPoliciesParams,) => {
    return ["/api/policy-management/policies", ...(params ? [params]: [])] as const;
    }

    
export const getGetPoliciesQueryOptions = <TData = Awaited<ReturnType<typeof getPolicies>>, TError = HTTPValidationError>(params: GetPoliciesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicies>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPoliciesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPolicies>>> = ({ signal }) => getPolicies(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPolicies>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPoliciesQueryResult = NonNullable<Awaited<ReturnType<typeof getPolicies>>>
export type GetPoliciesQueryError = HTTPValidationError


export function useGetPolicies<TData = Awaited<ReturnType<typeof getPolicies>>, TError = HTTPValidationError>(
 params: GetPoliciesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicies>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPolicies>>,
          TError,
          Awaited<ReturnType<typeof getPolicies>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPolicies<TData = Awaited<ReturnType<typeof getPolicies>>, TError = HTTPValidationError>(
 params: GetPoliciesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicies>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPolicies>>,
          TError,
          Awaited<ReturnType<typeof getPolicies>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPolicies<TData = Awaited<ReturnType<typeof getPolicies>>, TError = HTTPValidationError>(
 params: GetPoliciesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicies>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List All Available Policies
 */

export function useGetPolicies<TData = Awaited<ReturnType<typeof getPolicies>>, TError = HTTPValidationError>(
 params: GetPoliciesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicies>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPoliciesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Reorder Policy Priorities
 */
export const orderPolicyPriority = (
    reOrderPoliciesRequest: ReOrderPoliciesRequest,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<ReOrderPoliciesResponse>(
      {url: "/api/policy-management/re-order", method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: reOrderPoliciesRequest, signal
    },
      );
    }
  


export const getOrderPolicyPriorityMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof orderPolicyPriority>>, TError,{data: ReOrderPoliciesRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof orderPolicyPriority>>, TError,{data: ReOrderPoliciesRequest}, TContext> => {

const mutationKey = ['orderPolicyPriority'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof orderPolicyPriority>>, {data: ReOrderPoliciesRequest}> = (props) => {
          const {data} = props ?? {};

          return  orderPolicyPriority(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrderPolicyPriorityMutationResult = NonNullable<Awaited<ReturnType<typeof orderPolicyPriority>>>
    export type OrderPolicyPriorityMutationBody = ReOrderPoliciesRequest
    export type OrderPolicyPriorityMutationError = HTTPValidationError

    /**
 * @summary Reorder Policy Priorities
 */
export const useOrderPolicyPriority = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof orderPolicyPriority>>, TError,{data: ReOrderPoliciesRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof orderPolicyPriority>>,
        TError,
        {data: ReOrderPoliciesRequest},
        TContext
      > => {

      const mutationOptions = getOrderPolicyPriorityMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Validate Policy Condition
 */
export const validatePolicyCondition = (
    policyConditionValidationRequest: PolicyConditionValidationRequest,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<AssetManagementAdvancedFilterResponse>(
      {url: "/api/policy-management/validate", method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: policyConditionValidationRequest, signal
    },
      );
    }
  


export const getValidatePolicyConditionMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof validatePolicyCondition>>, TError,{data: PolicyConditionValidationRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof validatePolicyCondition>>, TError,{data: PolicyConditionValidationRequest}, TContext> => {

const mutationKey = ['validatePolicyCondition'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof validatePolicyCondition>>, {data: PolicyConditionValidationRequest}> = (props) => {
          const {data} = props ?? {};

          return  validatePolicyCondition(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ValidatePolicyConditionMutationResult = NonNullable<Awaited<ReturnType<typeof validatePolicyCondition>>>
    export type ValidatePolicyConditionMutationBody = PolicyConditionValidationRequest
    export type ValidatePolicyConditionMutationError = HTTPValidationError

    /**
 * @summary Validate Policy Condition
 */
export const useValidatePolicyCondition = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof validatePolicyCondition>>, TError,{data: PolicyConditionValidationRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof validatePolicyCondition>>,
        TError,
        {data: PolicyConditionValidationRequest},
        TContext
      > => {

      const mutationOptions = getValidatePolicyConditionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Change Policy Enable Status
 */
export const enablePolicy = (
    policyId: string,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<MessageOnlyResponse>(
      {url: `/api/policy-management/${policyId}/enable`, method: 'GET', signal
    },
      );
    }
  

const getEnablePolicyQueryKey = (policyId: string,) => {
    return [`/api/policy-management/${policyId}/enable`] as const;
    }

    
export const getEnablePolicyQueryOptions = <TData = Awaited<ReturnType<typeof enablePolicy>>, TError = HTTPValidationError>(policyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof enablePolicy>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEnablePolicyQueryKey(policyId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof enablePolicy>>> = ({ signal }) => enablePolicy(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof enablePolicy>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type EnablePolicyQueryResult = NonNullable<Awaited<ReturnType<typeof enablePolicy>>>
export type EnablePolicyQueryError = HTTPValidationError


export function useEnablePolicy<TData = Awaited<ReturnType<typeof enablePolicy>>, TError = HTTPValidationError>(
 policyId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof enablePolicy>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof enablePolicy>>,
          TError,
          Awaited<ReturnType<typeof enablePolicy>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEnablePolicy<TData = Awaited<ReturnType<typeof enablePolicy>>, TError = HTTPValidationError>(
 policyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof enablePolicy>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof enablePolicy>>,
          TError,
          Awaited<ReturnType<typeof enablePolicy>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEnablePolicy<TData = Awaited<ReturnType<typeof enablePolicy>>, TError = HTTPValidationError>(
 policyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof enablePolicy>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Change Policy Enable Status
 */

export function useEnablePolicy<TData = Awaited<ReturnType<typeof enablePolicy>>, TError = HTTPValidationError>(
 policyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof enablePolicy>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getEnablePolicyQueryOptions(policyId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Enforce Policy
 */
export const enforcePolicy = (
    policyId: string,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<MessageOnlyResponse>(
      {url: `/api/policy-management/${policyId}/enforce`, method: 'GET', signal
    },
      );
    }
  

const getEnforcePolicyQueryKey = (policyId: string,) => {
    return [`/api/policy-management/${policyId}/enforce`] as const;
    }

    
export const getEnforcePolicyQueryOptions = <TData = Awaited<ReturnType<typeof enforcePolicy>>, TError = HTTPValidationError>(policyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof enforcePolicy>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEnforcePolicyQueryKey(policyId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof enforcePolicy>>> = ({ signal }) => enforcePolicy(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof enforcePolicy>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type EnforcePolicyQueryResult = NonNullable<Awaited<ReturnType<typeof enforcePolicy>>>
export type EnforcePolicyQueryError = HTTPValidationError


export function useEnforcePolicy<TData = Awaited<ReturnType<typeof enforcePolicy>>, TError = HTTPValidationError>(
 policyId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof enforcePolicy>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof enforcePolicy>>,
          TError,
          Awaited<ReturnType<typeof enforcePolicy>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEnforcePolicy<TData = Awaited<ReturnType<typeof enforcePolicy>>, TError = HTTPValidationError>(
 policyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof enforcePolicy>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof enforcePolicy>>,
          TError,
          Awaited<ReturnType<typeof enforcePolicy>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEnforcePolicy<TData = Awaited<ReturnType<typeof enforcePolicy>>, TError = HTTPValidationError>(
 policyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof enforcePolicy>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Enforce Policy
 */

export function useEnforcePolicy<TData = Awaited<ReturnType<typeof enforcePolicy>>, TError = HTTPValidationError>(
 policyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof enforcePolicy>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getEnforcePolicyQueryOptions(policyId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Check Policy Dependency
 */
export const getPolicyDependency = (
    policyId: string,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<PolicyDependencyCheckResponse>(
      {url: `/api/policy-management/${policyId}/dependency`, method: 'GET', signal
    },
      );
    }
  

const getGetPolicyDependencyQueryKey = (policyId: string,) => {
    return [`/api/policy-management/${policyId}/dependency`] as const;
    }

    
export const getGetPolicyDependencyQueryOptions = <TData = Awaited<ReturnType<typeof getPolicyDependency>>, TError = HTTPValidationError>(policyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicyDependency>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPolicyDependencyQueryKey(policyId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPolicyDependency>>> = ({ signal }) => getPolicyDependency(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPolicyDependency>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPolicyDependencyQueryResult = NonNullable<Awaited<ReturnType<typeof getPolicyDependency>>>
export type GetPolicyDependencyQueryError = HTTPValidationError


export function useGetPolicyDependency<TData = Awaited<ReturnType<typeof getPolicyDependency>>, TError = HTTPValidationError>(
 policyId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicyDependency>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPolicyDependency>>,
          TError,
          Awaited<ReturnType<typeof getPolicyDependency>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPolicyDependency<TData = Awaited<ReturnType<typeof getPolicyDependency>>, TError = HTTPValidationError>(
 policyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicyDependency>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPolicyDependency>>,
          TError,
          Awaited<ReturnType<typeof getPolicyDependency>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPolicyDependency<TData = Awaited<ReturnType<typeof getPolicyDependency>>, TError = HTTPValidationError>(
 policyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicyDependency>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Check Policy Dependency
 */

export function useGetPolicyDependency<TData = Awaited<ReturnType<typeof getPolicyDependency>>, TError = HTTPValidationError>(
 policyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicyDependency>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPolicyDependencyQueryOptions(policyId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Single Policy Information
 */
export const getPolicy = (
    policyId: string,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<EachPolicyManagementPolicy>(
      {url: `/api/policy-management/${policyId}`, method: 'GET', signal
    },
      );
    }
  

const getGetPolicyQueryKey = (policyId: string,) => {
    return [`/api/policy-management/${policyId}`] as const;
    }

    
export const getGetPolicyQueryOptions = <TData = Awaited<ReturnType<typeof getPolicy>>, TError = HTTPValidationError>(policyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicy>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPolicyQueryKey(policyId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPolicy>>> = ({ signal }) => getPolicy(policyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(policyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPolicy>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPolicyQueryResult = NonNullable<Awaited<ReturnType<typeof getPolicy>>>
export type GetPolicyQueryError = HTTPValidationError


export function useGetPolicy<TData = Awaited<ReturnType<typeof getPolicy>>, TError = HTTPValidationError>(
 policyId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicy>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPolicy>>,
          TError,
          Awaited<ReturnType<typeof getPolicy>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPolicy<TData = Awaited<ReturnType<typeof getPolicy>>, TError = HTTPValidationError>(
 policyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicy>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPolicy>>,
          TError,
          Awaited<ReturnType<typeof getPolicy>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPolicy<TData = Awaited<ReturnType<typeof getPolicy>>, TError = HTTPValidationError>(
 policyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicy>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Single Policy Information
 */

export function useGetPolicy<TData = Awaited<ReturnType<typeof getPolicy>>, TError = HTTPValidationError>(
 policyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPolicy>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPolicyQueryOptions(policyId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Edit Single Policy
 */
export const updatePolicy = (
    policyId: string,
    editPolicyRequest: EditPolicyRequest,
 ) => {
      
      
      return orvalMutator<EachPolicyManagementPolicy>(
      {url: `/api/policy-management/${policyId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: editPolicyRequest
    },
      );
    }
  


export const getUpdatePolicyMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePolicy>>, TError,{policyId: string;data: EditPolicyRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updatePolicy>>, TError,{policyId: string;data: EditPolicyRequest}, TContext> => {

const mutationKey = ['updatePolicy'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePolicy>>, {policyId: string;data: EditPolicyRequest}> = (props) => {
          const {policyId,data} = props ?? {};

          return  updatePolicy(policyId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdatePolicyMutationResult = NonNullable<Awaited<ReturnType<typeof updatePolicy>>>
    export type UpdatePolicyMutationBody = EditPolicyRequest
    export type UpdatePolicyMutationError = HTTPValidationError

    /**
 * @summary Edit Single Policy
 */
export const useUpdatePolicy = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePolicy>>, TError,{policyId: string;data: EditPolicyRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updatePolicy>>,
        TError,
        {policyId: string;data: EditPolicyRequest},
        TContext
      > => {

      const mutationOptions = getUpdatePolicyMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete Single Policy
 */
export const deletePolicy = (
    policyId: string,
 ) => {
      
      
      return orvalMutator<MessageOnlyResponse>(
      {url: `/api/policy-management/${policyId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeletePolicyMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePolicy>>, TError,{policyId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deletePolicy>>, TError,{policyId: string}, TContext> => {

const mutationKey = ['deletePolicy'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePolicy>>, {policyId: string}> = (props) => {
          const {policyId} = props ?? {};

          return  deletePolicy(policyId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePolicyMutationResult = NonNullable<Awaited<ReturnType<typeof deletePolicy>>>
    
    export type DeletePolicyMutationError = HTTPValidationError

    /**
 * @summary Delete Single Policy
 */
export const useDeletePolicy = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePolicy>>, TError,{policyId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deletePolicy>>,
        TError,
        {policyId: string},
        TContext
      > => {

      const mutationOptions = getDeletePolicyMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    