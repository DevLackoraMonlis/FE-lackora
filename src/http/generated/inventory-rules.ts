/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * MonoWatch BackBone
 * MonoWatch Security Asset Management
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AssetManagementAdvancedFilterResponse,
  ChangeInventoryRuleStatusParams,
  CreateInventoryRule,
  DeleteInventoryRuleParams,
  EachInventoryRule,
  EditInventoryRule,
  GetInventoryRuleDependencyParams,
  GetInventoryRuleParams,
  GetInventoryRulesParams,
  HTTPValidationError,
  InventoryRuleConditionValidationRequest,
  InventoryRuleDataSourceResponse,
  InventoryRuleDependencyCheckResponse,
  InventoryRulesMatchedAssets,
  MessageOnlyResponse,
  PaginatedBaseResponseEachInventoryRuleNoneType,
  ReOrderInventoryRuleRequest,
  ReOrderInventoryRuleResponse
} from './models';

import { orvalMutator } from '../orval-mutator';





/**
 * @summary Create New Inventory Rule
 */
export const createInventoryRule = (
    createInventoryRule: CreateInventoryRule,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<EachInventoryRule>(
      {url: `/api/inventory-rules/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createInventoryRule, signal
    },
      );
    }
  


export const getCreateInventoryRuleMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createInventoryRule>>, TError,{data: CreateInventoryRule}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createInventoryRule>>, TError,{data: CreateInventoryRule}, TContext> => {

const mutationKey = ['createInventoryRule'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createInventoryRule>>, {data: CreateInventoryRule}> = (props) => {
          const {data} = props ?? {};

          return  createInventoryRule(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateInventoryRuleMutationResult = NonNullable<Awaited<ReturnType<typeof createInventoryRule>>>
    export type CreateInventoryRuleMutationBody = CreateInventoryRule
    export type CreateInventoryRuleMutationError = HTTPValidationError

    /**
 * @summary Create New Inventory Rule
 */
export const useCreateInventoryRule = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createInventoryRule>>, TError,{data: CreateInventoryRule}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createInventoryRule>>,
        TError,
        {data: CreateInventoryRule},
        TContext
      > => {

      const mutationOptions = getCreateInventoryRuleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary List All Available Inventory Rules
 */
export const getInventoryRules = (
    params: GetInventoryRulesParams,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<PaginatedBaseResponseEachInventoryRuleNoneType>(
      {url: `/api/inventory-rules/`, method: 'GET',
        params, signal
    },
      );
    }
  

const getGetInventoryRulesQueryKey = (params: GetInventoryRulesParams,) => {
    return [`/api/inventory-rules/`, ...(params ? [params]: [])] as const;
    }

    
export const getGetInventoryRulesQueryOptions = <TData = Awaited<ReturnType<typeof getInventoryRules>>, TError = HTTPValidationError>(params: GetInventoryRulesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryRules>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetInventoryRulesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInventoryRules>>> = ({ signal }) => getInventoryRules(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getInventoryRules>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetInventoryRulesQueryResult = NonNullable<Awaited<ReturnType<typeof getInventoryRules>>>
export type GetInventoryRulesQueryError = HTTPValidationError


export function useGetInventoryRules<TData = Awaited<ReturnType<typeof getInventoryRules>>, TError = HTTPValidationError>(
 params: GetInventoryRulesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryRules>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInventoryRules>>,
          TError,
          Awaited<ReturnType<typeof getInventoryRules>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInventoryRules<TData = Awaited<ReturnType<typeof getInventoryRules>>, TError = HTTPValidationError>(
 params: GetInventoryRulesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryRules>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInventoryRules>>,
          TError,
          Awaited<ReturnType<typeof getInventoryRules>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInventoryRules<TData = Awaited<ReturnType<typeof getInventoryRules>>, TError = HTTPValidationError>(
 params: GetInventoryRulesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryRules>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List All Available Inventory Rules
 */

export function useGetInventoryRules<TData = Awaited<ReturnType<typeof getInventoryRules>>, TError = HTTPValidationError>(
 params: GetInventoryRulesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryRules>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetInventoryRulesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Reorder Inventory Rule Priorities
 */
export const orderInventoryRulePriority = (
    reOrderInventoryRuleRequest: ReOrderInventoryRuleRequest,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<ReOrderInventoryRuleResponse>(
      {url: `/api/inventory-rules/re-order`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: reOrderInventoryRuleRequest, signal
    },
      );
    }
  


export const getOrderInventoryRulePriorityMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof orderInventoryRulePriority>>, TError,{data: ReOrderInventoryRuleRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof orderInventoryRulePriority>>, TError,{data: ReOrderInventoryRuleRequest}, TContext> => {

const mutationKey = ['orderInventoryRulePriority'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof orderInventoryRulePriority>>, {data: ReOrderInventoryRuleRequest}> = (props) => {
          const {data} = props ?? {};

          return  orderInventoryRulePriority(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrderInventoryRulePriorityMutationResult = NonNullable<Awaited<ReturnType<typeof orderInventoryRulePriority>>>
    export type OrderInventoryRulePriorityMutationBody = ReOrderInventoryRuleRequest
    export type OrderInventoryRulePriorityMutationError = HTTPValidationError

    /**
 * @summary Reorder Inventory Rule Priorities
 */
export const useOrderInventoryRulePriority = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof orderInventoryRulePriority>>, TError,{data: ReOrderInventoryRuleRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof orderInventoryRulePriority>>,
        TError,
        {data: ReOrderInventoryRuleRequest},
        TContext
      > => {

      const mutationOptions = getOrderInventoryRulePriorityMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Validate Inventory Rule Condition
 */
export const validateInventoryRuleCondition = (
    inventoryRuleConditionValidationRequest: InventoryRuleConditionValidationRequest,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<AssetManagementAdvancedFilterResponse>(
      {url: `/api/inventory-rules/validate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: inventoryRuleConditionValidationRequest, signal
    },
      );
    }
  


export const getValidateInventoryRuleConditionMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof validateInventoryRuleCondition>>, TError,{data: InventoryRuleConditionValidationRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof validateInventoryRuleCondition>>, TError,{data: InventoryRuleConditionValidationRequest}, TContext> => {

const mutationKey = ['validateInventoryRuleCondition'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof validateInventoryRuleCondition>>, {data: InventoryRuleConditionValidationRequest}> = (props) => {
          const {data} = props ?? {};

          return  validateInventoryRuleCondition(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ValidateInventoryRuleConditionMutationResult = NonNullable<Awaited<ReturnType<typeof validateInventoryRuleCondition>>>
    export type ValidateInventoryRuleConditionMutationBody = InventoryRuleConditionValidationRequest
    export type ValidateInventoryRuleConditionMutationError = HTTPValidationError

    /**
 * @summary Validate Inventory Rule Condition
 */
export const useValidateInventoryRuleCondition = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof validateInventoryRuleCondition>>, TError,{data: InventoryRuleConditionValidationRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof validateInventoryRuleCondition>>,
        TError,
        {data: InventoryRuleConditionValidationRequest},
        TContext
      > => {

      const mutationOptions = getValidateInventoryRuleConditionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get Inventory Rules Data Sources Information
 */
export const getInventorRuleDataSource = (
    
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<InventoryRuleDataSourceResponse>(
      {url: `/api/inventory-rules/data-sources`, method: 'GET', signal
    },
      );
    }
  

const getGetInventorRuleDataSourceQueryKey = () => {
    return [`/api/inventory-rules/data-sources`] as const;
    }

    
export const getGetInventorRuleDataSourceQueryOptions = <TData = Awaited<ReturnType<typeof getInventorRuleDataSource>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventorRuleDataSource>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetInventorRuleDataSourceQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInventorRuleDataSource>>> = ({ signal }) => getInventorRuleDataSource(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getInventorRuleDataSource>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetInventorRuleDataSourceQueryResult = NonNullable<Awaited<ReturnType<typeof getInventorRuleDataSource>>>
export type GetInventorRuleDataSourceQueryError = unknown


export function useGetInventorRuleDataSource<TData = Awaited<ReturnType<typeof getInventorRuleDataSource>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventorRuleDataSource>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInventorRuleDataSource>>,
          TError,
          Awaited<ReturnType<typeof getInventorRuleDataSource>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInventorRuleDataSource<TData = Awaited<ReturnType<typeof getInventorRuleDataSource>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventorRuleDataSource>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInventorRuleDataSource>>,
          TError,
          Awaited<ReturnType<typeof getInventorRuleDataSource>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInventorRuleDataSource<TData = Awaited<ReturnType<typeof getInventorRuleDataSource>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventorRuleDataSource>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Inventory Rules Data Sources Information
 */

export function useGetInventorRuleDataSource<TData = Awaited<ReturnType<typeof getInventorRuleDataSource>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventorRuleDataSource>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetInventorRuleDataSourceQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Change Inventory Rule Status
 */
export const changeInventoryRuleStatus = (
    inventoryRuleId: string,
    params: ChangeInventoryRuleStatusParams,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<MessageOnlyResponse>(
      {url: `/api/inventory-rules/${inventoryRuleId}/change-status`, method: 'GET',
        params, signal
    },
      );
    }
  

const getChangeInventoryRuleStatusQueryKey = (inventoryRuleId: string,
    params: ChangeInventoryRuleStatusParams,) => {
    return [`/api/inventory-rules/${inventoryRuleId}/change-status`, ...(params ? [params]: [])] as const;
    }

    
export const getChangeInventoryRuleStatusQueryOptions = <TData = Awaited<ReturnType<typeof changeInventoryRuleStatus>>, TError = HTTPValidationError>(inventoryRuleId: string,
    params: ChangeInventoryRuleStatusParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof changeInventoryRuleStatus>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getChangeInventoryRuleStatusQueryKey(inventoryRuleId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof changeInventoryRuleStatus>>> = ({ signal }) => changeInventoryRuleStatus(inventoryRuleId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(inventoryRuleId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof changeInventoryRuleStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ChangeInventoryRuleStatusQueryResult = NonNullable<Awaited<ReturnType<typeof changeInventoryRuleStatus>>>
export type ChangeInventoryRuleStatusQueryError = HTTPValidationError


export function useChangeInventoryRuleStatus<TData = Awaited<ReturnType<typeof changeInventoryRuleStatus>>, TError = HTTPValidationError>(
 inventoryRuleId: string,
    params: ChangeInventoryRuleStatusParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof changeInventoryRuleStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof changeInventoryRuleStatus>>,
          TError,
          Awaited<ReturnType<typeof changeInventoryRuleStatus>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useChangeInventoryRuleStatus<TData = Awaited<ReturnType<typeof changeInventoryRuleStatus>>, TError = HTTPValidationError>(
 inventoryRuleId: string,
    params: ChangeInventoryRuleStatusParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof changeInventoryRuleStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof changeInventoryRuleStatus>>,
          TError,
          Awaited<ReturnType<typeof changeInventoryRuleStatus>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useChangeInventoryRuleStatus<TData = Awaited<ReturnType<typeof changeInventoryRuleStatus>>, TError = HTTPValidationError>(
 inventoryRuleId: string,
    params: ChangeInventoryRuleStatusParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof changeInventoryRuleStatus>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Change Inventory Rule Status
 */

export function useChangeInventoryRuleStatus<TData = Awaited<ReturnType<typeof changeInventoryRuleStatus>>, TError = HTTPValidationError>(
 inventoryRuleId: string,
    params: ChangeInventoryRuleStatusParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof changeInventoryRuleStatus>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getChangeInventoryRuleStatusQueryOptions(inventoryRuleId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Check Inventory Rule Dependency
 */
export const getInventoryRuleDependency = (
    inventoryRuleId: string,
    params: GetInventoryRuleDependencyParams,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<InventoryRuleDependencyCheckResponse>(
      {url: `/api/inventory-rules/${inventoryRuleId}/dependency`, method: 'GET',
        params, signal
    },
      );
    }
  

const getGetInventoryRuleDependencyQueryKey = (inventoryRuleId: string,
    params: GetInventoryRuleDependencyParams,) => {
    return [`/api/inventory-rules/${inventoryRuleId}/dependency`, ...(params ? [params]: [])] as const;
    }

    
export const getGetInventoryRuleDependencyQueryOptions = <TData = Awaited<ReturnType<typeof getInventoryRuleDependency>>, TError = HTTPValidationError>(inventoryRuleId: string,
    params: GetInventoryRuleDependencyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryRuleDependency>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetInventoryRuleDependencyQueryKey(inventoryRuleId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInventoryRuleDependency>>> = ({ signal }) => getInventoryRuleDependency(inventoryRuleId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(inventoryRuleId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getInventoryRuleDependency>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetInventoryRuleDependencyQueryResult = NonNullable<Awaited<ReturnType<typeof getInventoryRuleDependency>>>
export type GetInventoryRuleDependencyQueryError = HTTPValidationError


export function useGetInventoryRuleDependency<TData = Awaited<ReturnType<typeof getInventoryRuleDependency>>, TError = HTTPValidationError>(
 inventoryRuleId: string,
    params: GetInventoryRuleDependencyParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryRuleDependency>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInventoryRuleDependency>>,
          TError,
          Awaited<ReturnType<typeof getInventoryRuleDependency>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInventoryRuleDependency<TData = Awaited<ReturnType<typeof getInventoryRuleDependency>>, TError = HTTPValidationError>(
 inventoryRuleId: string,
    params: GetInventoryRuleDependencyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryRuleDependency>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInventoryRuleDependency>>,
          TError,
          Awaited<ReturnType<typeof getInventoryRuleDependency>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInventoryRuleDependency<TData = Awaited<ReturnType<typeof getInventoryRuleDependency>>, TError = HTTPValidationError>(
 inventoryRuleId: string,
    params: GetInventoryRuleDependencyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryRuleDependency>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Check Inventory Rule Dependency
 */

export function useGetInventoryRuleDependency<TData = Awaited<ReturnType<typeof getInventoryRuleDependency>>, TError = HTTPValidationError>(
 inventoryRuleId: string,
    params: GetInventoryRuleDependencyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryRuleDependency>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetInventoryRuleDependencyQueryOptions(inventoryRuleId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Single Inventory Rule Matched Assets
 */
export const getInventoryRuleMatchedAssets = (
    inventoryRuleId: string,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<InventoryRulesMatchedAssets>(
      {url: `/api/inventory-rules/${inventoryRuleId}/matched-assets`, method: 'GET', signal
    },
      );
    }
  

const getGetInventoryRuleMatchedAssetsQueryKey = (inventoryRuleId: string,) => {
    return [`/api/inventory-rules/${inventoryRuleId}/matched-assets`] as const;
    }

    
export const getGetInventoryRuleMatchedAssetsQueryOptions = <TData = Awaited<ReturnType<typeof getInventoryRuleMatchedAssets>>, TError = HTTPValidationError>(inventoryRuleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryRuleMatchedAssets>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetInventoryRuleMatchedAssetsQueryKey(inventoryRuleId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInventoryRuleMatchedAssets>>> = ({ signal }) => getInventoryRuleMatchedAssets(inventoryRuleId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(inventoryRuleId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getInventoryRuleMatchedAssets>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetInventoryRuleMatchedAssetsQueryResult = NonNullable<Awaited<ReturnType<typeof getInventoryRuleMatchedAssets>>>
export type GetInventoryRuleMatchedAssetsQueryError = HTTPValidationError


export function useGetInventoryRuleMatchedAssets<TData = Awaited<ReturnType<typeof getInventoryRuleMatchedAssets>>, TError = HTTPValidationError>(
 inventoryRuleId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryRuleMatchedAssets>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInventoryRuleMatchedAssets>>,
          TError,
          Awaited<ReturnType<typeof getInventoryRuleMatchedAssets>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInventoryRuleMatchedAssets<TData = Awaited<ReturnType<typeof getInventoryRuleMatchedAssets>>, TError = HTTPValidationError>(
 inventoryRuleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryRuleMatchedAssets>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInventoryRuleMatchedAssets>>,
          TError,
          Awaited<ReturnType<typeof getInventoryRuleMatchedAssets>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInventoryRuleMatchedAssets<TData = Awaited<ReturnType<typeof getInventoryRuleMatchedAssets>>, TError = HTTPValidationError>(
 inventoryRuleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryRuleMatchedAssets>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Single Inventory Rule Matched Assets
 */

export function useGetInventoryRuleMatchedAssets<TData = Awaited<ReturnType<typeof getInventoryRuleMatchedAssets>>, TError = HTTPValidationError>(
 inventoryRuleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryRuleMatchedAssets>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetInventoryRuleMatchedAssetsQueryOptions(inventoryRuleId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Single Inventory Rule Information
 */
export const getInventoryRule = (
    inventoryRuleId: string,
    params: GetInventoryRuleParams,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<EachInventoryRule>(
      {url: `/api/inventory-rules/${inventoryRuleId}`, method: 'GET',
        params, signal
    },
      );
    }
  

const getGetInventoryRuleQueryKey = (inventoryRuleId: string,
    params: GetInventoryRuleParams,) => {
    return [`/api/inventory-rules/${inventoryRuleId}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetInventoryRuleQueryOptions = <TData = Awaited<ReturnType<typeof getInventoryRule>>, TError = HTTPValidationError>(inventoryRuleId: string,
    params: GetInventoryRuleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryRule>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetInventoryRuleQueryKey(inventoryRuleId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInventoryRule>>> = ({ signal }) => getInventoryRule(inventoryRuleId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(inventoryRuleId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getInventoryRule>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetInventoryRuleQueryResult = NonNullable<Awaited<ReturnType<typeof getInventoryRule>>>
export type GetInventoryRuleQueryError = HTTPValidationError


export function useGetInventoryRule<TData = Awaited<ReturnType<typeof getInventoryRule>>, TError = HTTPValidationError>(
 inventoryRuleId: string,
    params: GetInventoryRuleParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryRule>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInventoryRule>>,
          TError,
          Awaited<ReturnType<typeof getInventoryRule>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInventoryRule<TData = Awaited<ReturnType<typeof getInventoryRule>>, TError = HTTPValidationError>(
 inventoryRuleId: string,
    params: GetInventoryRuleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryRule>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInventoryRule>>,
          TError,
          Awaited<ReturnType<typeof getInventoryRule>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInventoryRule<TData = Awaited<ReturnType<typeof getInventoryRule>>, TError = HTTPValidationError>(
 inventoryRuleId: string,
    params: GetInventoryRuleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryRule>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Single Inventory Rule Information
 */

export function useGetInventoryRule<TData = Awaited<ReturnType<typeof getInventoryRule>>, TError = HTTPValidationError>(
 inventoryRuleId: string,
    params: GetInventoryRuleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventoryRule>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetInventoryRuleQueryOptions(inventoryRuleId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Edit Single Inventory Rule
 */
export const updateInventoryRule = (
    inventoryRuleId: string,
    editInventoryRule: EditInventoryRule,
 ) => {
      
      
      return orvalMutator<EachInventoryRule>(
      {url: `/api/inventory-rules/${inventoryRuleId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: editInventoryRule
    },
      );
    }
  


export const getUpdateInventoryRuleMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateInventoryRule>>, TError,{inventoryRuleId: string;data: EditInventoryRule}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateInventoryRule>>, TError,{inventoryRuleId: string;data: EditInventoryRule}, TContext> => {

const mutationKey = ['updateInventoryRule'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateInventoryRule>>, {inventoryRuleId: string;data: EditInventoryRule}> = (props) => {
          const {inventoryRuleId,data} = props ?? {};

          return  updateInventoryRule(inventoryRuleId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateInventoryRuleMutationResult = NonNullable<Awaited<ReturnType<typeof updateInventoryRule>>>
    export type UpdateInventoryRuleMutationBody = EditInventoryRule
    export type UpdateInventoryRuleMutationError = HTTPValidationError

    /**
 * @summary Edit Single Inventory Rule
 */
export const useUpdateInventoryRule = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateInventoryRule>>, TError,{inventoryRuleId: string;data: EditInventoryRule}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateInventoryRule>>,
        TError,
        {inventoryRuleId: string;data: EditInventoryRule},
        TContext
      > => {

      const mutationOptions = getUpdateInventoryRuleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete Single Inventory Rule
 */
export const deleteInventoryRule = (
    inventoryRuleId: string,
    params: DeleteInventoryRuleParams,
 ) => {
      
      
      return orvalMutator<MessageOnlyResponse>(
      {url: `/api/inventory-rules/${inventoryRuleId}`, method: 'DELETE',
        params
    },
      );
    }
  


export const getDeleteInventoryRuleMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteInventoryRule>>, TError,{inventoryRuleId: string;params: DeleteInventoryRuleParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteInventoryRule>>, TError,{inventoryRuleId: string;params: DeleteInventoryRuleParams}, TContext> => {

const mutationKey = ['deleteInventoryRule'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteInventoryRule>>, {inventoryRuleId: string;params: DeleteInventoryRuleParams}> = (props) => {
          const {inventoryRuleId,params} = props ?? {};

          return  deleteInventoryRule(inventoryRuleId,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteInventoryRuleMutationResult = NonNullable<Awaited<ReturnType<typeof deleteInventoryRule>>>
    
    export type DeleteInventoryRuleMutationError = HTTPValidationError

    /**
 * @summary Delete Single Inventory Rule
 */
export const useDeleteInventoryRule = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteInventoryRule>>, TError,{inventoryRuleId: string;params: DeleteInventoryRuleParams}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteInventoryRule>>,
        TError,
        {inventoryRuleId: string;params: DeleteInventoryRuleParams},
        TContext
      > => {

      const mutationOptions = getDeleteInventoryRuleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    