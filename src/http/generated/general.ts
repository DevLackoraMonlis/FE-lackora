/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * LACKORA API
 * LACKORA Advanced REST API
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  UploadDto
} from './models';

import { orvalMutator } from '../orval-mutator';





/**
 * @summary Returns the image file by Guid Id.
 */
export const generalFtpStream = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<void>(
      {url: `/api/v1/General/ftp-stream/${id}`, method: 'GET', signal
    },
      );
    }
  

const getGeneralFtpStreamQueryKey = (id: string,) => {
    return [`/api/v1/General/ftp-stream/${id}`] as const;
    }

    
export const getGeneralFtpStreamQueryOptions = <TData = Awaited<ReturnType<typeof generalFtpStream>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof generalFtpStream>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGeneralFtpStreamQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof generalFtpStream>>> = ({ signal }) => generalFtpStream(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof generalFtpStream>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GeneralFtpStreamQueryResult = NonNullable<Awaited<ReturnType<typeof generalFtpStream>>>
export type GeneralFtpStreamQueryError = unknown


export function useGeneralFtpStream<TData = Awaited<ReturnType<typeof generalFtpStream>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof generalFtpStream>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof generalFtpStream>>,
          TError,
          Awaited<ReturnType<typeof generalFtpStream>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGeneralFtpStream<TData = Awaited<ReturnType<typeof generalFtpStream>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof generalFtpStream>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof generalFtpStream>>,
          TError,
          Awaited<ReturnType<typeof generalFtpStream>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGeneralFtpStream<TData = Awaited<ReturnType<typeof generalFtpStream>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof generalFtpStream>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Returns the image file by Guid Id.
 */

export function useGeneralFtpStream<TData = Awaited<ReturnType<typeof generalFtpStream>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof generalFtpStream>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGeneralFtpStreamQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Upload a Base64 image to FTP, create GUID folder, return folder GUID
 */
export const generalFtpUpload = (
    uploadDto: UploadDto,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<void>(
      {url: `/api/v1/General/ftp-upload`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: uploadDto, signal
    },
      );
    }
  


export const getGeneralFtpUploadMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof generalFtpUpload>>, TError,{data: UploadDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof generalFtpUpload>>, TError,{data: UploadDto}, TContext> => {

const mutationKey = ['generalFtpUpload'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof generalFtpUpload>>, {data: UploadDto}> = (props) => {
          const {data} = props ?? {};

          return  generalFtpUpload(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GeneralFtpUploadMutationResult = NonNullable<Awaited<ReturnType<typeof generalFtpUpload>>>
    export type GeneralFtpUploadMutationBody = UploadDto
    export type GeneralFtpUploadMutationError = unknown

    /**
 * @summary Upload a Base64 image to FTP, create GUID folder, return folder GUID
 */
export const useGeneralFtpUpload = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof generalFtpUpload>>, TError,{data: UploadDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof generalFtpUpload>>,
        TError,
        {data: UploadDto},
        TContext
      > => {

      const mutationOptions = getGeneralFtpUploadMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete folder and all files inside by folder GUID
 */
export const generalFtpDelete = (
    id: string,
 ) => {
      
      
      return orvalMutator<void>(
      {url: `/api/v1/General/ftp-delete/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getGeneralFtpDeleteMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof generalFtpDelete>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof generalFtpDelete>>, TError,{id: string}, TContext> => {

const mutationKey = ['generalFtpDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof generalFtpDelete>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  generalFtpDelete(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GeneralFtpDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof generalFtpDelete>>>
    
    export type GeneralFtpDeleteMutationError = unknown

    /**
 * @summary Delete folder and all files inside by folder GUID
 */
export const useGeneralFtpDelete = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof generalFtpDelete>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof generalFtpDelete>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getGeneralFtpDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    