/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * MonoWatch BackBone
 * MonoWatch Security Asset Management
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  EachWorkFlowPhaseMoreInformation,
  EachWorkflowInformation,
  GetWorkflowHistoryParams,
  HTTPValidationError,
  PaginatedBaseResponseEachWorkFlowHistoryEachListMetadataWrapper,
  WorkFlowHistoryDetails
} from './models';

import { orvalMutator } from '../orval-mutator';





/**
 * @summary Latest Workflow Information
 */
export const getWorkflows = (
    
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<EachWorkflowInformation>(
      {url: "/api/workflow-management/", method: 'GET', signal
    },
      );
    }
  

const getGetWorkflowsQueryKey = () => {
    return ["/api/workflow-management/"] as const;
    }

    
export const getGetWorkflowsQueryOptions = <TData = Awaited<ReturnType<typeof getWorkflows>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflows>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWorkflowsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWorkflows>>> = ({ signal }) => getWorkflows(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWorkflows>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWorkflowsQueryResult = NonNullable<Awaited<ReturnType<typeof getWorkflows>>>
export type GetWorkflowsQueryError = unknown


export function useGetWorkflows<TData = Awaited<ReturnType<typeof getWorkflows>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflows>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkflows>>,
          TError,
          Awaited<ReturnType<typeof getWorkflows>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWorkflows<TData = Awaited<ReturnType<typeof getWorkflows>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflows>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkflows>>,
          TError,
          Awaited<ReturnType<typeof getWorkflows>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWorkflows<TData = Awaited<ReturnType<typeof getWorkflows>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflows>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Latest Workflow Information
 */

export function useGetWorkflows<TData = Awaited<ReturnType<typeof getWorkflows>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflows>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWorkflowsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Step Details
 */
export const getWorkflowStep = (
    stepId: string,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<EachWorkFlowPhaseMoreInformation>(
      {url: `/api/workflow-management/step/${stepId}/details`, method: 'GET', signal
    },
      );
    }
  

const getGetWorkflowStepQueryKey = (stepId: string,) => {
    return [`/api/workflow-management/step/${stepId}/details`] as const;
    }

    
export const getGetWorkflowStepQueryOptions = <TData = Awaited<ReturnType<typeof getWorkflowStep>>, TError = HTTPValidationError>(stepId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflowStep>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWorkflowStepQueryKey(stepId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWorkflowStep>>> = ({ signal }) => getWorkflowStep(stepId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(stepId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWorkflowStep>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWorkflowStepQueryResult = NonNullable<Awaited<ReturnType<typeof getWorkflowStep>>>
export type GetWorkflowStepQueryError = HTTPValidationError


export function useGetWorkflowStep<TData = Awaited<ReturnType<typeof getWorkflowStep>>, TError = HTTPValidationError>(
 stepId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflowStep>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkflowStep>>,
          TError,
          Awaited<ReturnType<typeof getWorkflowStep>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWorkflowStep<TData = Awaited<ReturnType<typeof getWorkflowStep>>, TError = HTTPValidationError>(
 stepId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflowStep>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkflowStep>>,
          TError,
          Awaited<ReturnType<typeof getWorkflowStep>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWorkflowStep<TData = Awaited<ReturnType<typeof getWorkflowStep>>, TError = HTTPValidationError>(
 stepId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflowStep>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Step Details
 */

export function useGetWorkflowStep<TData = Awaited<ReturnType<typeof getWorkflowStep>>, TError = HTTPValidationError>(
 stepId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflowStep>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWorkflowStepQueryOptions(stepId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Workflow Histories
 */
export const getWorkflowHistory = (
    params?: GetWorkflowHistoryParams,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<PaginatedBaseResponseEachWorkFlowHistoryEachListMetadataWrapper>(
      {url: "/api/workflow-management/histories", method: 'GET',
        params, signal
    },
      );
    }
  

const getGetWorkflowHistoryQueryKey = (params?: GetWorkflowHistoryParams,) => {
    return ["/api/workflow-management/histories", ...(params ? [params]: [])] as const;
    }

    
export const getGetWorkflowHistoryQueryOptions = <TData = Awaited<ReturnType<typeof getWorkflowHistory>>, TError = HTTPValidationError>(params?: GetWorkflowHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflowHistory>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWorkflowHistoryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWorkflowHistory>>> = ({ signal }) => getWorkflowHistory(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWorkflowHistory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWorkflowHistoryQueryResult = NonNullable<Awaited<ReturnType<typeof getWorkflowHistory>>>
export type GetWorkflowHistoryQueryError = HTTPValidationError


export function useGetWorkflowHistory<TData = Awaited<ReturnType<typeof getWorkflowHistory>>, TError = HTTPValidationError>(
 params: undefined |  GetWorkflowHistoryParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflowHistory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkflowHistory>>,
          TError,
          Awaited<ReturnType<typeof getWorkflowHistory>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWorkflowHistory<TData = Awaited<ReturnType<typeof getWorkflowHistory>>, TError = HTTPValidationError>(
 params?: GetWorkflowHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflowHistory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkflowHistory>>,
          TError,
          Awaited<ReturnType<typeof getWorkflowHistory>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWorkflowHistory<TData = Awaited<ReturnType<typeof getWorkflowHistory>>, TError = HTTPValidationError>(
 params?: GetWorkflowHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflowHistory>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Workflow Histories
 */

export function useGetWorkflowHistory<TData = Awaited<ReturnType<typeof getWorkflowHistory>>, TError = HTTPValidationError>(
 params?: GetWorkflowHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflowHistory>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWorkflowHistoryQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Workflow History Details
 */
export const getWorkflowHistoryDetail = (
    workflowId: string,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<WorkFlowHistoryDetails>(
      {url: `/api/workflow-management/histories/${workflowId}/details`, method: 'GET', signal
    },
      );
    }
  

const getGetWorkflowHistoryDetailQueryKey = (workflowId: string,) => {
    return [`/api/workflow-management/histories/${workflowId}/details`] as const;
    }

    
export const getGetWorkflowHistoryDetailQueryOptions = <TData = Awaited<ReturnType<typeof getWorkflowHistoryDetail>>, TError = HTTPValidationError>(workflowId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflowHistoryDetail>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWorkflowHistoryDetailQueryKey(workflowId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWorkflowHistoryDetail>>> = ({ signal }) => getWorkflowHistoryDetail(workflowId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(workflowId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWorkflowHistoryDetail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWorkflowHistoryDetailQueryResult = NonNullable<Awaited<ReturnType<typeof getWorkflowHistoryDetail>>>
export type GetWorkflowHistoryDetailQueryError = HTTPValidationError


export function useGetWorkflowHistoryDetail<TData = Awaited<ReturnType<typeof getWorkflowHistoryDetail>>, TError = HTTPValidationError>(
 workflowId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflowHistoryDetail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkflowHistoryDetail>>,
          TError,
          Awaited<ReturnType<typeof getWorkflowHistoryDetail>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWorkflowHistoryDetail<TData = Awaited<ReturnType<typeof getWorkflowHistoryDetail>>, TError = HTTPValidationError>(
 workflowId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflowHistoryDetail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkflowHistoryDetail>>,
          TError,
          Awaited<ReturnType<typeof getWorkflowHistoryDetail>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWorkflowHistoryDetail<TData = Awaited<ReturnType<typeof getWorkflowHistoryDetail>>, TError = HTTPValidationError>(
 workflowId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflowHistoryDetail>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Workflow History Details
 */

export function useGetWorkflowHistoryDetail<TData = Awaited<ReturnType<typeof getWorkflowHistoryDetail>>, TError = HTTPValidationError>(
 workflowId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkflowHistoryDetail>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWorkflowHistoryDetailQueryOptions(workflowId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



