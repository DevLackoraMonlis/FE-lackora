/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * MonoWatch BackBone
 * MonoWatch Security Asset Management
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateZone,
  EachZone,
  GetZonesParams,
  HTTPValidationError,
  MessageOnlyResponse,
  PaginatedBaseResponseEachZoneEachListMetadataWrapper
} from './models';

import { orvalMutator } from '../orval-mutator';





/**
 * @summary List All Zones
 */
export const getZones = (
    params?: GetZonesParams,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<PaginatedBaseResponseEachZoneEachListMetadataWrapper>(
      {url: "/api/network-management/zone/", method: 'GET',
        params, signal
    },
      );
    }
  

const getGetZonesQueryKey = (params?: GetZonesParams,) => {
    return ["/api/network-management/zone/", ...(params ? [params]: [])] as const;
    }

    
export const getGetZonesQueryOptions = <TData = Awaited<ReturnType<typeof getZones>>, TError = HTTPValidationError>(params?: GetZonesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZones>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZonesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZones>>> = ({ signal }) => getZones(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZones>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetZonesQueryResult = NonNullable<Awaited<ReturnType<typeof getZones>>>
export type GetZonesQueryError = HTTPValidationError


export function useGetZones<TData = Awaited<ReturnType<typeof getZones>>, TError = HTTPValidationError>(
 params: undefined |  GetZonesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZones>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZones>>,
          TError,
          Awaited<ReturnType<typeof getZones>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetZones<TData = Awaited<ReturnType<typeof getZones>>, TError = HTTPValidationError>(
 params?: GetZonesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZones>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZones>>,
          TError,
          Awaited<ReturnType<typeof getZones>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetZones<TData = Awaited<ReturnType<typeof getZones>>, TError = HTTPValidationError>(
 params?: GetZonesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZones>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List All Zones
 */

export function useGetZones<TData = Awaited<ReturnType<typeof getZones>>, TError = HTTPValidationError>(
 params?: GetZonesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZones>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetZonesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create Zone
 */
export const createZone = (
    createZone: CreateZone,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<EachZone>(
      {url: "/api/network-management/zone/", method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createZone, signal
    },
      );
    }
  


export const getCreateZoneMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createZone>>, TError,{data: CreateZone}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createZone>>, TError,{data: CreateZone}, TContext> => {

const mutationKey = ['createZone'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createZone>>, {data: CreateZone}> = (props) => {
          const {data} = props ?? {};

          return  createZone(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateZoneMutationResult = NonNullable<Awaited<ReturnType<typeof createZone>>>
    export type CreateZoneMutationBody = CreateZone
    export type CreateZoneMutationError = HTTPValidationError

    /**
 * @summary Create Zone
 */
export const useCreateZone = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createZone>>, TError,{data: CreateZone}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createZone>>,
        TError,
        {data: CreateZone},
        TContext
      > => {

      const mutationOptions = getCreateZoneMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary List Single Zone
 */
export const getZone = (
    zoneId: string,
 signal?: AbortSignal
) => {
      
      
      return orvalMutator<EachZone>(
      {url: `/api/network-management/zone/${zoneId}`, method: 'GET', signal
    },
      );
    }
  

const getGetZoneQueryKey = (zoneId: string,) => {
    return [`/api/network-management/zone/${zoneId}`] as const;
    }

    
export const getGetZoneQueryOptions = <TData = Awaited<ReturnType<typeof getZone>>, TError = HTTPValidationError>(zoneId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZone>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetZoneQueryKey(zoneId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getZone>>> = ({ signal }) => getZone(zoneId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(zoneId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getZone>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetZoneQueryResult = NonNullable<Awaited<ReturnType<typeof getZone>>>
export type GetZoneQueryError = HTTPValidationError


export function useGetZone<TData = Awaited<ReturnType<typeof getZone>>, TError = HTTPValidationError>(
 zoneId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZone>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZone>>,
          TError,
          Awaited<ReturnType<typeof getZone>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetZone<TData = Awaited<ReturnType<typeof getZone>>, TError = HTTPValidationError>(
 zoneId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZone>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getZone>>,
          TError,
          Awaited<ReturnType<typeof getZone>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetZone<TData = Awaited<ReturnType<typeof getZone>>, TError = HTTPValidationError>(
 zoneId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZone>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List Single Zone
 */

export function useGetZone<TData = Awaited<ReturnType<typeof getZone>>, TError = HTTPValidationError>(
 zoneId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getZone>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetZoneQueryOptions(zoneId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Zone
 */
export const editZone = (
    zoneId: string,
    createZone: CreateZone,
 ) => {
      
      
      return orvalMutator<EachZone>(
      {url: `/api/network-management/zone/${zoneId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: createZone
    },
      );
    }
  


export const getEditZoneMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof editZone>>, TError,{zoneId: string;data: CreateZone}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof editZone>>, TError,{zoneId: string;data: CreateZone}, TContext> => {

const mutationKey = ['editZone'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof editZone>>, {zoneId: string;data: CreateZone}> = (props) => {
          const {zoneId,data} = props ?? {};

          return  editZone(zoneId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EditZoneMutationResult = NonNullable<Awaited<ReturnType<typeof editZone>>>
    export type EditZoneMutationBody = CreateZone
    export type EditZoneMutationError = HTTPValidationError

    /**
 * @summary Update Zone
 */
export const useEditZone = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof editZone>>, TError,{zoneId: string;data: CreateZone}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof editZone>>,
        TError,
        {zoneId: string;data: CreateZone},
        TContext
      > => {

      const mutationOptions = getEditZoneMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete Zone
 */
export const deleteZone = (
    zoneId: string,
 ) => {
      
      
      return orvalMutator<MessageOnlyResponse>(
      {url: `/api/network-management/zone/${zoneId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteZoneMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteZone>>, TError,{zoneId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteZone>>, TError,{zoneId: string}, TContext> => {

const mutationKey = ['deleteZone'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteZone>>, {zoneId: string}> = (props) => {
          const {zoneId} = props ?? {};

          return  deleteZone(zoneId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteZoneMutationResult = NonNullable<Awaited<ReturnType<typeof deleteZone>>>
    
    export type DeleteZoneMutationError = HTTPValidationError

    /**
 * @summary Delete Zone
 */
export const useDeleteZone = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteZone>>, TError,{zoneId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteZone>>,
        TError,
        {zoneId: string},
        TContext
      > => {

      const mutationOptions = getDeleteZoneMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    